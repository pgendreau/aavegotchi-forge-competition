"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

type Aavegotchi {
  activeListing: BigInt
  baseRarityScore: BigInt!

  """
  Block in which the Aavegotchi was claimed. Should coincide with createdAt
  """
  claimedAt: BigInt
  claimedTime: BigInt
  collateral: Bytes!

  """Block in which the Aavegotchi entity was created"""
  createdAt: BigInt
  equippedDelegatedWearables: [Int!]
  equippedSetID: BigInt
  equippedSetName: String
  equippedWearables: [Int!]!
  escrow: Bytes!
  experience: BigInt!
  gotchiId: BigInt!
  hauntId: BigInt!
  historicalPrices: [BigInt!]
  id: ID!
  kinship: BigInt!
  lastInteracted: BigInt!
  lending: BigInt
  level: BigInt!
  listings(first: Int = 100, orderBy: ERC721Listing_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ERC721Listing_filter): [ERC721Listing!]!
  locked: Boolean!
  minimumStake: BigInt!
  modifiedNumericTraits: [Int!]!
  modifiedRarityScore: BigInt!
  name: String!
  nameLowerCase: String!
  numericTraits: [Int!]!
  originalOwner: User
  owner: User
  portal: Portal!
  possibleSets: BigInt
  randomNumber: BigInt!
  stakedAmount: BigInt!
  status: BigInt!
  timesTraded: BigInt!
  toNextLevel: BigInt!
  usedSkillPoints: BigInt!
  withSetsNumericTraits: [Int!]
  withSetsRarityScore: BigInt
}

type AavegotchiOption {
  baseRarityScore: Int!
  collateralType: Bytes!

  """AavegotchiOption id is composed by <PORTAL-ID>-<GOTCHI-OPTION>"""
  id: ID!
  minimumStake: BigInt!
  numericTraits: [Int!]!
  owner: User!
  portal: Portal!
  portalOptionId: Int!
  randomNumber: BigInt!
}

input AavegotchiOption_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AavegotchiOption_filter]
  baseRarityScore: Int
  baseRarityScore_gt: Int
  baseRarityScore_gte: Int
  baseRarityScore_in: [Int!]
  baseRarityScore_lt: Int
  baseRarityScore_lte: Int
  baseRarityScore_not: Int
  baseRarityScore_not_in: [Int!]
  collateralType: Bytes
  collateralType_contains: Bytes
  collateralType_gt: Bytes
  collateralType_gte: Bytes
  collateralType_in: [Bytes!]
  collateralType_lt: Bytes
  collateralType_lte: Bytes
  collateralType_not: Bytes
  collateralType_not_contains: Bytes
  collateralType_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  minimumStake: BigInt
  minimumStake_gt: BigInt
  minimumStake_gte: BigInt
  minimumStake_in: [BigInt!]
  minimumStake_lt: BigInt
  minimumStake_lte: BigInt
  minimumStake_not: BigInt
  minimumStake_not_in: [BigInt!]
  numericTraits: [Int!]
  numericTraits_contains: [Int!]
  numericTraits_contains_nocase: [Int!]
  numericTraits_not: [Int!]
  numericTraits_not_contains: [Int!]
  numericTraits_not_contains_nocase: [Int!]
  or: [AavegotchiOption_filter]
  owner: String
  owner_: User_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  portal: String
  portalOptionId: Int
  portalOptionId_gt: Int
  portalOptionId_gte: Int
  portalOptionId_in: [Int!]
  portalOptionId_lt: Int
  portalOptionId_lte: Int
  portalOptionId_not: Int
  portalOptionId_not_in: [Int!]
  portal_: Portal_filter
  portal_contains: String
  portal_contains_nocase: String
  portal_ends_with: String
  portal_ends_with_nocase: String
  portal_gt: String
  portal_gte: String
  portal_in: [String!]
  portal_lt: String
  portal_lte: String
  portal_not: String
  portal_not_contains: String
  portal_not_contains_nocase: String
  portal_not_ends_with: String
  portal_not_ends_with_nocase: String
  portal_not_in: [String!]
  portal_not_starts_with: String
  portal_not_starts_with_nocase: String
  portal_starts_with: String
  portal_starts_with_nocase: String
  randomNumber: BigInt
  randomNumber_gt: BigInt
  randomNumber_gte: BigInt
  randomNumber_in: [BigInt!]
  randomNumber_lt: BigInt
  randomNumber_lte: BigInt
  randomNumber_not: BigInt
  randomNumber_not_in: [BigInt!]
}

enum AavegotchiOption_orderBy {
  baseRarityScore
  collateralType
  id
  minimumStake
  numericTraits
  owner
  owner__amountFakeGotchis
  owner__currentUniqueFakeGotchisOwned
  owner__currentUniqueFakeGotchisOwnedArray
  owner__fakeGotchis
  owner__id
  owner__totalFakeGotchisOwnedArray
  owner__totalUniqueFakeGotchisOwned
  owner__totalUniqueFakeGotchisOwnedArray
  portal
  portalOptionId
  portal__activeListing
  portal__boughtAt
  portal__claimedAt
  portal__claimedTime
  portal__gotchiId
  portal__hauntId
  portal__id
  portal__openedAt
  portal__status
  portal__timesTraded
  randomNumber
}

input Aavegotchi_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  activeListing: BigInt
  activeListing_gt: BigInt
  activeListing_gte: BigInt
  activeListing_in: [BigInt!]
  activeListing_lt: BigInt
  activeListing_lte: BigInt
  activeListing_not: BigInt
  activeListing_not_in: [BigInt!]
  and: [Aavegotchi_filter]
  baseRarityScore: BigInt
  baseRarityScore_gt: BigInt
  baseRarityScore_gte: BigInt
  baseRarityScore_in: [BigInt!]
  baseRarityScore_lt: BigInt
  baseRarityScore_lte: BigInt
  baseRarityScore_not: BigInt
  baseRarityScore_not_in: [BigInt!]
  claimedAt: BigInt
  claimedAt_gt: BigInt
  claimedAt_gte: BigInt
  claimedAt_in: [BigInt!]
  claimedAt_lt: BigInt
  claimedAt_lte: BigInt
  claimedAt_not: BigInt
  claimedAt_not_in: [BigInt!]
  claimedTime: BigInt
  claimedTime_gt: BigInt
  claimedTime_gte: BigInt
  claimedTime_in: [BigInt!]
  claimedTime_lt: BigInt
  claimedTime_lte: BigInt
  claimedTime_not: BigInt
  claimedTime_not_in: [BigInt!]
  collateral: Bytes
  collateral_contains: Bytes
  collateral_gt: Bytes
  collateral_gte: Bytes
  collateral_in: [Bytes!]
  collateral_lt: Bytes
  collateral_lte: Bytes
  collateral_not: Bytes
  collateral_not_contains: Bytes
  collateral_not_in: [Bytes!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  equippedDelegatedWearables: [Int!]
  equippedDelegatedWearables_contains: [Int!]
  equippedDelegatedWearables_contains_nocase: [Int!]
  equippedDelegatedWearables_not: [Int!]
  equippedDelegatedWearables_not_contains: [Int!]
  equippedDelegatedWearables_not_contains_nocase: [Int!]
  equippedSetID: BigInt
  equippedSetID_gt: BigInt
  equippedSetID_gte: BigInt
  equippedSetID_in: [BigInt!]
  equippedSetID_lt: BigInt
  equippedSetID_lte: BigInt
  equippedSetID_not: BigInt
  equippedSetID_not_in: [BigInt!]
  equippedSetName: String
  equippedSetName_contains: String
  equippedSetName_contains_nocase: String
  equippedSetName_ends_with: String
  equippedSetName_ends_with_nocase: String
  equippedSetName_gt: String
  equippedSetName_gte: String
  equippedSetName_in: [String!]
  equippedSetName_lt: String
  equippedSetName_lte: String
  equippedSetName_not: String
  equippedSetName_not_contains: String
  equippedSetName_not_contains_nocase: String
  equippedSetName_not_ends_with: String
  equippedSetName_not_ends_with_nocase: String
  equippedSetName_not_in: [String!]
  equippedSetName_not_starts_with: String
  equippedSetName_not_starts_with_nocase: String
  equippedSetName_starts_with: String
  equippedSetName_starts_with_nocase: String
  equippedWearables: [Int!]
  equippedWearables_contains: [Int!]
  equippedWearables_contains_nocase: [Int!]
  equippedWearables_not: [Int!]
  equippedWearables_not_contains: [Int!]
  equippedWearables_not_contains_nocase: [Int!]
  escrow: Bytes
  escrow_contains: Bytes
  escrow_gt: Bytes
  escrow_gte: Bytes
  escrow_in: [Bytes!]
  escrow_lt: Bytes
  escrow_lte: Bytes
  escrow_not: Bytes
  escrow_not_contains: Bytes
  escrow_not_in: [Bytes!]
  experience: BigInt
  experience_gt: BigInt
  experience_gte: BigInt
  experience_in: [BigInt!]
  experience_lt: BigInt
  experience_lte: BigInt
  experience_not: BigInt
  experience_not_in: [BigInt!]
  gotchiId: BigInt
  gotchiId_gt: BigInt
  gotchiId_gte: BigInt
  gotchiId_in: [BigInt!]
  gotchiId_lt: BigInt
  gotchiId_lte: BigInt
  gotchiId_not: BigInt
  gotchiId_not_in: [BigInt!]
  hauntId: BigInt
  hauntId_gt: BigInt
  hauntId_gte: BigInt
  hauntId_in: [BigInt!]
  hauntId_lt: BigInt
  hauntId_lte: BigInt
  hauntId_not: BigInt
  hauntId_not_in: [BigInt!]
  historicalPrices: [BigInt!]
  historicalPrices_contains: [BigInt!]
  historicalPrices_contains_nocase: [BigInt!]
  historicalPrices_not: [BigInt!]
  historicalPrices_not_contains: [BigInt!]
  historicalPrices_not_contains_nocase: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  kinship: BigInt
  kinship_gt: BigInt
  kinship_gte: BigInt
  kinship_in: [BigInt!]
  kinship_lt: BigInt
  kinship_lte: BigInt
  kinship_not: BigInt
  kinship_not_in: [BigInt!]
  lastInteracted: BigInt
  lastInteracted_gt: BigInt
  lastInteracted_gte: BigInt
  lastInteracted_in: [BigInt!]
  lastInteracted_lt: BigInt
  lastInteracted_lte: BigInt
  lastInteracted_not: BigInt
  lastInteracted_not_in: [BigInt!]
  lending: BigInt
  lending_gt: BigInt
  lending_gte: BigInt
  lending_in: [BigInt!]
  lending_lt: BigInt
  lending_lte: BigInt
  lending_not: BigInt
  lending_not_in: [BigInt!]
  level: BigInt
  level_gt: BigInt
  level_gte: BigInt
  level_in: [BigInt!]
  level_lt: BigInt
  level_lte: BigInt
  level_not: BigInt
  level_not_in: [BigInt!]
  listings_: ERC721Listing_filter
  locked: Boolean
  locked_in: [Boolean!]
  locked_not: Boolean
  locked_not_in: [Boolean!]
  minimumStake: BigInt
  minimumStake_gt: BigInt
  minimumStake_gte: BigInt
  minimumStake_in: [BigInt!]
  minimumStake_lt: BigInt
  minimumStake_lte: BigInt
  minimumStake_not: BigInt
  minimumStake_not_in: [BigInt!]
  modifiedNumericTraits: [Int!]
  modifiedNumericTraits_contains: [Int!]
  modifiedNumericTraits_contains_nocase: [Int!]
  modifiedNumericTraits_not: [Int!]
  modifiedNumericTraits_not_contains: [Int!]
  modifiedNumericTraits_not_contains_nocase: [Int!]
  modifiedRarityScore: BigInt
  modifiedRarityScore_gt: BigInt
  modifiedRarityScore_gte: BigInt
  modifiedRarityScore_in: [BigInt!]
  modifiedRarityScore_lt: BigInt
  modifiedRarityScore_lte: BigInt
  modifiedRarityScore_not: BigInt
  modifiedRarityScore_not_in: [BigInt!]
  name: String
  nameLowerCase: String
  nameLowerCase_contains: String
  nameLowerCase_contains_nocase: String
  nameLowerCase_ends_with: String
  nameLowerCase_ends_with_nocase: String
  nameLowerCase_gt: String
  nameLowerCase_gte: String
  nameLowerCase_in: [String!]
  nameLowerCase_lt: String
  nameLowerCase_lte: String
  nameLowerCase_not: String
  nameLowerCase_not_contains: String
  nameLowerCase_not_contains_nocase: String
  nameLowerCase_not_ends_with: String
  nameLowerCase_not_ends_with_nocase: String
  nameLowerCase_not_in: [String!]
  nameLowerCase_not_starts_with: String
  nameLowerCase_not_starts_with_nocase: String
  nameLowerCase_starts_with: String
  nameLowerCase_starts_with_nocase: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  numericTraits: [Int!]
  numericTraits_contains: [Int!]
  numericTraits_contains_nocase: [Int!]
  numericTraits_not: [Int!]
  numericTraits_not_contains: [Int!]
  numericTraits_not_contains_nocase: [Int!]
  or: [Aavegotchi_filter]
  originalOwner: String
  originalOwner_: User_filter
  originalOwner_contains: String
  originalOwner_contains_nocase: String
  originalOwner_ends_with: String
  originalOwner_ends_with_nocase: String
  originalOwner_gt: String
  originalOwner_gte: String
  originalOwner_in: [String!]
  originalOwner_lt: String
  originalOwner_lte: String
  originalOwner_not: String
  originalOwner_not_contains: String
  originalOwner_not_contains_nocase: String
  originalOwner_not_ends_with: String
  originalOwner_not_ends_with_nocase: String
  originalOwner_not_in: [String!]
  originalOwner_not_starts_with: String
  originalOwner_not_starts_with_nocase: String
  originalOwner_starts_with: String
  originalOwner_starts_with_nocase: String
  owner: String
  owner_: User_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  portal_: Portal_filter
  possibleSets: BigInt
  possibleSets_gt: BigInt
  possibleSets_gte: BigInt
  possibleSets_in: [BigInt!]
  possibleSets_lt: BigInt
  possibleSets_lte: BigInt
  possibleSets_not: BigInt
  possibleSets_not_in: [BigInt!]
  randomNumber: BigInt
  randomNumber_gt: BigInt
  randomNumber_gte: BigInt
  randomNumber_in: [BigInt!]
  randomNumber_lt: BigInt
  randomNumber_lte: BigInt
  randomNumber_not: BigInt
  randomNumber_not_in: [BigInt!]
  stakedAmount: BigInt
  stakedAmount_gt: BigInt
  stakedAmount_gte: BigInt
  stakedAmount_in: [BigInt!]
  stakedAmount_lt: BigInt
  stakedAmount_lte: BigInt
  stakedAmount_not: BigInt
  stakedAmount_not_in: [BigInt!]
  status: BigInt
  status_gt: BigInt
  status_gte: BigInt
  status_in: [BigInt!]
  status_lt: BigInt
  status_lte: BigInt
  status_not: BigInt
  status_not_in: [BigInt!]
  timesTraded: BigInt
  timesTraded_gt: BigInt
  timesTraded_gte: BigInt
  timesTraded_in: [BigInt!]
  timesTraded_lt: BigInt
  timesTraded_lte: BigInt
  timesTraded_not: BigInt
  timesTraded_not_in: [BigInt!]
  toNextLevel: BigInt
  toNextLevel_gt: BigInt
  toNextLevel_gte: BigInt
  toNextLevel_in: [BigInt!]
  toNextLevel_lt: BigInt
  toNextLevel_lte: BigInt
  toNextLevel_not: BigInt
  toNextLevel_not_in: [BigInt!]
  usedSkillPoints: BigInt
  usedSkillPoints_gt: BigInt
  usedSkillPoints_gte: BigInt
  usedSkillPoints_in: [BigInt!]
  usedSkillPoints_lt: BigInt
  usedSkillPoints_lte: BigInt
  usedSkillPoints_not: BigInt
  usedSkillPoints_not_in: [BigInt!]
  withSetsNumericTraits: [Int!]
  withSetsNumericTraits_contains: [Int!]
  withSetsNumericTraits_contains_nocase: [Int!]
  withSetsNumericTraits_not: [Int!]
  withSetsNumericTraits_not_contains: [Int!]
  withSetsNumericTraits_not_contains_nocase: [Int!]
  withSetsRarityScore: BigInt
  withSetsRarityScore_gt: BigInt
  withSetsRarityScore_gte: BigInt
  withSetsRarityScore_in: [BigInt!]
  withSetsRarityScore_lt: BigInt
  withSetsRarityScore_lte: BigInt
  withSetsRarityScore_not: BigInt
  withSetsRarityScore_not_in: [BigInt!]
}

enum Aavegotchi_orderBy {
  activeListing
  baseRarityScore
  claimedAt
  claimedTime
  collateral
  createdAt
  equippedDelegatedWearables
  equippedSetID
  equippedSetName
  equippedWearables
  escrow
  experience
  gotchiId
  hauntId
  historicalPrices
  id
  kinship
  lastInteracted
  lending
  level
  listings
  locked
  minimumStake
  modifiedNumericTraits
  modifiedRarityScore
  name
  nameLowerCase
  numericTraits
  originalOwner
  originalOwner__amountFakeGotchis
  originalOwner__currentUniqueFakeGotchisOwned
  originalOwner__currentUniqueFakeGotchisOwnedArray
  originalOwner__fakeGotchis
  originalOwner__id
  originalOwner__totalFakeGotchisOwnedArray
  originalOwner__totalUniqueFakeGotchisOwned
  originalOwner__totalUniqueFakeGotchisOwnedArray
  owner
  owner__amountFakeGotchis
  owner__currentUniqueFakeGotchisOwned
  owner__currentUniqueFakeGotchisOwnedArray
  owner__fakeGotchis
  owner__id
  owner__totalFakeGotchisOwnedArray
  owner__totalUniqueFakeGotchisOwned
  owner__totalUniqueFakeGotchisOwnedArray
  portal
  portal__activeListing
  portal__boughtAt
  portal__claimedAt
  portal__claimedTime
  portal__gotchiId
  portal__hauntId
  portal__id
  portal__openedAt
  portal__status
  portal__timesTraded
  possibleSets
  randomNumber
  stakedAmount
  status
  timesTraded
  toNextLevel
  usedSkillPoints
  withSetsNumericTraits
  withSetsRarityScore
}

enum Aggregation_interval {
  day
  hour
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type ClaimedToken {
  amount: BigInt!
  id: ID!
  lending: GotchiLending!
  token: Bytes!
}

input ClaimedToken_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [ClaimedToken_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lending: String
  lending_: GotchiLending_filter
  lending_contains: String
  lending_contains_nocase: String
  lending_ends_with: String
  lending_ends_with_nocase: String
  lending_gt: String
  lending_gte: String
  lending_in: [String!]
  lending_lt: String
  lending_lte: String
  lending_not: String
  lending_not_contains: String
  lending_not_contains_nocase: String
  lending_not_ends_with: String
  lending_not_ends_with_nocase: String
  lending_not_in: [String!]
  lending_not_starts_with: String
  lending_not_starts_with_nocase: String
  lending_starts_with: String
  lending_starts_with_nocase: String
  or: [ClaimedToken_filter]
  token: Bytes
  token_contains: Bytes
  token_gt: Bytes
  token_gte: Bytes
  token_in: [Bytes!]
  token_lt: Bytes
  token_lte: Bytes
  token_not: Bytes
  token_not_contains: Bytes
  token_not_in: [Bytes!]
}

enum ClaimedToken_orderBy {
  amount
  id
  lending
  lending__borrower
  lending__cancelled
  lending__channellingAllowed
  lending__completed
  lending__gotchiBRS
  lending__gotchiKinship
  lending__gotchiTokenId
  lending__id
  lending__lastClaimed
  lending__lender
  lending__originalOwner
  lending__period
  lending__rentDuration
  lending__splitBorrower
  lending__splitOther
  lending__splitOwner
  lending__thirdPartyAddress
  lending__timeAgreed
  lending__timeCreated
  lending__timeEnded
  lending__upfrontCost
  lending__whitelistId
  token
}

type ERC721BuyOrder {
  buyer: Bytes!
  canceled: Boolean
  canceledAt: BigInt
  category: BigInt!
  createdAt: BigInt!
  duration: BigInt!
  erc721TokenAddress: Bytes!
  erc721TokenId: BigInt!
  executedAt: BigInt
  id: ID!
  priceInWei: BigInt!
  seller: Bytes
  validationHash: Bytes!
}

input ERC721BuyOrder_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ERC721BuyOrder_filter]
  buyer: Bytes
  buyer_contains: Bytes
  buyer_gt: Bytes
  buyer_gte: Bytes
  buyer_in: [Bytes!]
  buyer_lt: Bytes
  buyer_lte: Bytes
  buyer_not: Bytes
  buyer_not_contains: Bytes
  buyer_not_in: [Bytes!]
  canceled: Boolean
  canceledAt: BigInt
  canceledAt_gt: BigInt
  canceledAt_gte: BigInt
  canceledAt_in: [BigInt!]
  canceledAt_lt: BigInt
  canceledAt_lte: BigInt
  canceledAt_not: BigInt
  canceledAt_not_in: [BigInt!]
  canceled_in: [Boolean!]
  canceled_not: Boolean
  canceled_not_in: [Boolean!]
  category: BigInt
  category_gt: BigInt
  category_gte: BigInt
  category_in: [BigInt!]
  category_lt: BigInt
  category_lte: BigInt
  category_not: BigInt
  category_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  duration: BigInt
  duration_gt: BigInt
  duration_gte: BigInt
  duration_in: [BigInt!]
  duration_lt: BigInt
  duration_lte: BigInt
  duration_not: BigInt
  duration_not_in: [BigInt!]
  erc721TokenAddress: Bytes
  erc721TokenAddress_contains: Bytes
  erc721TokenAddress_gt: Bytes
  erc721TokenAddress_gte: Bytes
  erc721TokenAddress_in: [Bytes!]
  erc721TokenAddress_lt: Bytes
  erc721TokenAddress_lte: Bytes
  erc721TokenAddress_not: Bytes
  erc721TokenAddress_not_contains: Bytes
  erc721TokenAddress_not_in: [Bytes!]
  erc721TokenId: BigInt
  erc721TokenId_gt: BigInt
  erc721TokenId_gte: BigInt
  erc721TokenId_in: [BigInt!]
  erc721TokenId_lt: BigInt
  erc721TokenId_lte: BigInt
  erc721TokenId_not: BigInt
  erc721TokenId_not_in: [BigInt!]
  executedAt: BigInt
  executedAt_gt: BigInt
  executedAt_gte: BigInt
  executedAt_in: [BigInt!]
  executedAt_lt: BigInt
  executedAt_lte: BigInt
  executedAt_not: BigInt
  executedAt_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [ERC721BuyOrder_filter]
  priceInWei: BigInt
  priceInWei_gt: BigInt
  priceInWei_gte: BigInt
  priceInWei_in: [BigInt!]
  priceInWei_lt: BigInt
  priceInWei_lte: BigInt
  priceInWei_not: BigInt
  priceInWei_not_in: [BigInt!]
  seller: Bytes
  seller_contains: Bytes
  seller_gt: Bytes
  seller_gte: Bytes
  seller_in: [Bytes!]
  seller_lt: Bytes
  seller_lte: Bytes
  seller_not: Bytes
  seller_not_contains: Bytes
  seller_not_in: [Bytes!]
  validationHash: Bytes
  validationHash_contains: Bytes
  validationHash_gt: Bytes
  validationHash_gte: Bytes
  validationHash_in: [Bytes!]
  validationHash_lt: Bytes
  validationHash_lte: Bytes
  validationHash_not: Bytes
  validationHash_not_contains: Bytes
  validationHash_not_in: [Bytes!]
}

enum ERC721BuyOrder_orderBy {
  buyer
  canceled
  canceledAt
  category
  createdAt
  duration
  erc721TokenAddress
  erc721TokenId
  executedAt
  id
  priceInWei
  seller
  validationHash
}

type ERC721Listing {
  aggTrait: BigInt
  alphaBoost: BigInt
  amountEquippedWearables: Int
  baseRarityScore: BigInt
  blockCreated: BigInt!
  brnTrait: BigInt
  buyer: Bytes
  cancelled: Boolean
  category: BigInt!
  claimedAt: BigInt
  collateral: Bytes
  coordinateX: BigInt
  coordinateY: BigInt
  district: BigInt
  equippedWearables: [Int!]
  erc721TokenAddress: Bytes!
  experience: BigInt
  eycTrait: BigInt
  eysTrait: BigInt
  fakeGotchi_artist: User
  fakeGotchi_artistName: String
  fakeGotchi_description: String
  fakeGotchi_editions: Int
  fakeGotchi_name: String
  fakeGotchi_publisher: User
  fakeGotchi_publisherName: String
  fomoBoost: BigInt
  fudBoost: BigInt
  gotchi: Aavegotchi
  hauntId: BigInt
  id: ID!
  kekBoost: BigInt
  kinship: BigInt
  modifiedRarityScore: BigInt
  nameLowerCase: String
  nrgTrait: BigInt
  parcel: Parcel
  parcelHash: String
  portal: Portal
  priceInWei: BigInt!
  priceUpdatedAt: BigInt
  recipient: Bytes
  seller: Bytes!
  size: BigInt
  soldBefore: Boolean
  spkTrait: BigInt
  timeCreated: BigInt!
  timePurchased: BigInt
  tokenId: BigInt!
  whitelist: Whitelist
}

input ERC721Listing_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  aggTrait: BigInt
  aggTrait_gt: BigInt
  aggTrait_gte: BigInt
  aggTrait_in: [BigInt!]
  aggTrait_lt: BigInt
  aggTrait_lte: BigInt
  aggTrait_not: BigInt
  aggTrait_not_in: [BigInt!]
  alphaBoost: BigInt
  alphaBoost_gt: BigInt
  alphaBoost_gte: BigInt
  alphaBoost_in: [BigInt!]
  alphaBoost_lt: BigInt
  alphaBoost_lte: BigInt
  alphaBoost_not: BigInt
  alphaBoost_not_in: [BigInt!]
  amountEquippedWearables: Int
  amountEquippedWearables_gt: Int
  amountEquippedWearables_gte: Int
  amountEquippedWearables_in: [Int!]
  amountEquippedWearables_lt: Int
  amountEquippedWearables_lte: Int
  amountEquippedWearables_not: Int
  amountEquippedWearables_not_in: [Int!]
  and: [ERC721Listing_filter]
  baseRarityScore: BigInt
  baseRarityScore_gt: BigInt
  baseRarityScore_gte: BigInt
  baseRarityScore_in: [BigInt!]
  baseRarityScore_lt: BigInt
  baseRarityScore_lte: BigInt
  baseRarityScore_not: BigInt
  baseRarityScore_not_in: [BigInt!]
  blockCreated: BigInt
  blockCreated_gt: BigInt
  blockCreated_gte: BigInt
  blockCreated_in: [BigInt!]
  blockCreated_lt: BigInt
  blockCreated_lte: BigInt
  blockCreated_not: BigInt
  blockCreated_not_in: [BigInt!]
  brnTrait: BigInt
  brnTrait_gt: BigInt
  brnTrait_gte: BigInt
  brnTrait_in: [BigInt!]
  brnTrait_lt: BigInt
  brnTrait_lte: BigInt
  brnTrait_not: BigInt
  brnTrait_not_in: [BigInt!]
  buyer: Bytes
  buyer_contains: Bytes
  buyer_gt: Bytes
  buyer_gte: Bytes
  buyer_in: [Bytes!]
  buyer_lt: Bytes
  buyer_lte: Bytes
  buyer_not: Bytes
  buyer_not_contains: Bytes
  buyer_not_in: [Bytes!]
  cancelled: Boolean
  cancelled_in: [Boolean!]
  cancelled_not: Boolean
  cancelled_not_in: [Boolean!]
  category: BigInt
  category_gt: BigInt
  category_gte: BigInt
  category_in: [BigInt!]
  category_lt: BigInt
  category_lte: BigInt
  category_not: BigInt
  category_not_in: [BigInt!]
  claimedAt: BigInt
  claimedAt_gt: BigInt
  claimedAt_gte: BigInt
  claimedAt_in: [BigInt!]
  claimedAt_lt: BigInt
  claimedAt_lte: BigInt
  claimedAt_not: BigInt
  claimedAt_not_in: [BigInt!]
  collateral: Bytes
  collateral_contains: Bytes
  collateral_gt: Bytes
  collateral_gte: Bytes
  collateral_in: [Bytes!]
  collateral_lt: Bytes
  collateral_lte: Bytes
  collateral_not: Bytes
  collateral_not_contains: Bytes
  collateral_not_in: [Bytes!]
  coordinateX: BigInt
  coordinateX_gt: BigInt
  coordinateX_gte: BigInt
  coordinateX_in: [BigInt!]
  coordinateX_lt: BigInt
  coordinateX_lte: BigInt
  coordinateX_not: BigInt
  coordinateX_not_in: [BigInt!]
  coordinateY: BigInt
  coordinateY_gt: BigInt
  coordinateY_gte: BigInt
  coordinateY_in: [BigInt!]
  coordinateY_lt: BigInt
  coordinateY_lte: BigInt
  coordinateY_not: BigInt
  coordinateY_not_in: [BigInt!]
  district: BigInt
  district_gt: BigInt
  district_gte: BigInt
  district_in: [BigInt!]
  district_lt: BigInt
  district_lte: BigInt
  district_not: BigInt
  district_not_in: [BigInt!]
  equippedWearables: [Int!]
  equippedWearables_contains: [Int!]
  equippedWearables_contains_nocase: [Int!]
  equippedWearables_not: [Int!]
  equippedWearables_not_contains: [Int!]
  equippedWearables_not_contains_nocase: [Int!]
  erc721TokenAddress: Bytes
  erc721TokenAddress_contains: Bytes
  erc721TokenAddress_gt: Bytes
  erc721TokenAddress_gte: Bytes
  erc721TokenAddress_in: [Bytes!]
  erc721TokenAddress_lt: Bytes
  erc721TokenAddress_lte: Bytes
  erc721TokenAddress_not: Bytes
  erc721TokenAddress_not_contains: Bytes
  erc721TokenAddress_not_in: [Bytes!]
  experience: BigInt
  experience_gt: BigInt
  experience_gte: BigInt
  experience_in: [BigInt!]
  experience_lt: BigInt
  experience_lte: BigInt
  experience_not: BigInt
  experience_not_in: [BigInt!]
  eycTrait: BigInt
  eycTrait_gt: BigInt
  eycTrait_gte: BigInt
  eycTrait_in: [BigInt!]
  eycTrait_lt: BigInt
  eycTrait_lte: BigInt
  eycTrait_not: BigInt
  eycTrait_not_in: [BigInt!]
  eysTrait: BigInt
  eysTrait_gt: BigInt
  eysTrait_gte: BigInt
  eysTrait_in: [BigInt!]
  eysTrait_lt: BigInt
  eysTrait_lte: BigInt
  eysTrait_not: BigInt
  eysTrait_not_in: [BigInt!]
  fakeGotchi_artist: String
  fakeGotchi_artistName: String
  fakeGotchi_artistName_contains: String
  fakeGotchi_artistName_contains_nocase: String
  fakeGotchi_artistName_ends_with: String
  fakeGotchi_artistName_ends_with_nocase: String
  fakeGotchi_artistName_gt: String
  fakeGotchi_artistName_gte: String
  fakeGotchi_artistName_in: [String!]
  fakeGotchi_artistName_lt: String
  fakeGotchi_artistName_lte: String
  fakeGotchi_artistName_not: String
  fakeGotchi_artistName_not_contains: String
  fakeGotchi_artistName_not_contains_nocase: String
  fakeGotchi_artistName_not_ends_with: String
  fakeGotchi_artistName_not_ends_with_nocase: String
  fakeGotchi_artistName_not_in: [String!]
  fakeGotchi_artistName_not_starts_with: String
  fakeGotchi_artistName_not_starts_with_nocase: String
  fakeGotchi_artistName_starts_with: String
  fakeGotchi_artistName_starts_with_nocase: String
  fakeGotchi_artist_: User_filter
  fakeGotchi_artist_contains: String
  fakeGotchi_artist_contains_nocase: String
  fakeGotchi_artist_ends_with: String
  fakeGotchi_artist_ends_with_nocase: String
  fakeGotchi_artist_gt: String
  fakeGotchi_artist_gte: String
  fakeGotchi_artist_in: [String!]
  fakeGotchi_artist_lt: String
  fakeGotchi_artist_lte: String
  fakeGotchi_artist_not: String
  fakeGotchi_artist_not_contains: String
  fakeGotchi_artist_not_contains_nocase: String
  fakeGotchi_artist_not_ends_with: String
  fakeGotchi_artist_not_ends_with_nocase: String
  fakeGotchi_artist_not_in: [String!]
  fakeGotchi_artist_not_starts_with: String
  fakeGotchi_artist_not_starts_with_nocase: String
  fakeGotchi_artist_starts_with: String
  fakeGotchi_artist_starts_with_nocase: String
  fakeGotchi_description: String
  fakeGotchi_description_contains: String
  fakeGotchi_description_contains_nocase: String
  fakeGotchi_description_ends_with: String
  fakeGotchi_description_ends_with_nocase: String
  fakeGotchi_description_gt: String
  fakeGotchi_description_gte: String
  fakeGotchi_description_in: [String!]
  fakeGotchi_description_lt: String
  fakeGotchi_description_lte: String
  fakeGotchi_description_not: String
  fakeGotchi_description_not_contains: String
  fakeGotchi_description_not_contains_nocase: String
  fakeGotchi_description_not_ends_with: String
  fakeGotchi_description_not_ends_with_nocase: String
  fakeGotchi_description_not_in: [String!]
  fakeGotchi_description_not_starts_with: String
  fakeGotchi_description_not_starts_with_nocase: String
  fakeGotchi_description_starts_with: String
  fakeGotchi_description_starts_with_nocase: String
  fakeGotchi_editions: Int
  fakeGotchi_editions_gt: Int
  fakeGotchi_editions_gte: Int
  fakeGotchi_editions_in: [Int!]
  fakeGotchi_editions_lt: Int
  fakeGotchi_editions_lte: Int
  fakeGotchi_editions_not: Int
  fakeGotchi_editions_not_in: [Int!]
  fakeGotchi_name: String
  fakeGotchi_name_contains: String
  fakeGotchi_name_contains_nocase: String
  fakeGotchi_name_ends_with: String
  fakeGotchi_name_ends_with_nocase: String
  fakeGotchi_name_gt: String
  fakeGotchi_name_gte: String
  fakeGotchi_name_in: [String!]
  fakeGotchi_name_lt: String
  fakeGotchi_name_lte: String
  fakeGotchi_name_not: String
  fakeGotchi_name_not_contains: String
  fakeGotchi_name_not_contains_nocase: String
  fakeGotchi_name_not_ends_with: String
  fakeGotchi_name_not_ends_with_nocase: String
  fakeGotchi_name_not_in: [String!]
  fakeGotchi_name_not_starts_with: String
  fakeGotchi_name_not_starts_with_nocase: String
  fakeGotchi_name_starts_with: String
  fakeGotchi_name_starts_with_nocase: String
  fakeGotchi_publisher: String
  fakeGotchi_publisherName: String
  fakeGotchi_publisherName_contains: String
  fakeGotchi_publisherName_contains_nocase: String
  fakeGotchi_publisherName_ends_with: String
  fakeGotchi_publisherName_ends_with_nocase: String
  fakeGotchi_publisherName_gt: String
  fakeGotchi_publisherName_gte: String
  fakeGotchi_publisherName_in: [String!]
  fakeGotchi_publisherName_lt: String
  fakeGotchi_publisherName_lte: String
  fakeGotchi_publisherName_not: String
  fakeGotchi_publisherName_not_contains: String
  fakeGotchi_publisherName_not_contains_nocase: String
  fakeGotchi_publisherName_not_ends_with: String
  fakeGotchi_publisherName_not_ends_with_nocase: String
  fakeGotchi_publisherName_not_in: [String!]
  fakeGotchi_publisherName_not_starts_with: String
  fakeGotchi_publisherName_not_starts_with_nocase: String
  fakeGotchi_publisherName_starts_with: String
  fakeGotchi_publisherName_starts_with_nocase: String
  fakeGotchi_publisher_: User_filter
  fakeGotchi_publisher_contains: String
  fakeGotchi_publisher_contains_nocase: String
  fakeGotchi_publisher_ends_with: String
  fakeGotchi_publisher_ends_with_nocase: String
  fakeGotchi_publisher_gt: String
  fakeGotchi_publisher_gte: String
  fakeGotchi_publisher_in: [String!]
  fakeGotchi_publisher_lt: String
  fakeGotchi_publisher_lte: String
  fakeGotchi_publisher_not: String
  fakeGotchi_publisher_not_contains: String
  fakeGotchi_publisher_not_contains_nocase: String
  fakeGotchi_publisher_not_ends_with: String
  fakeGotchi_publisher_not_ends_with_nocase: String
  fakeGotchi_publisher_not_in: [String!]
  fakeGotchi_publisher_not_starts_with: String
  fakeGotchi_publisher_not_starts_with_nocase: String
  fakeGotchi_publisher_starts_with: String
  fakeGotchi_publisher_starts_with_nocase: String
  fomoBoost: BigInt
  fomoBoost_gt: BigInt
  fomoBoost_gte: BigInt
  fomoBoost_in: [BigInt!]
  fomoBoost_lt: BigInt
  fomoBoost_lte: BigInt
  fomoBoost_not: BigInt
  fomoBoost_not_in: [BigInt!]
  fudBoost: BigInt
  fudBoost_gt: BigInt
  fudBoost_gte: BigInt
  fudBoost_in: [BigInt!]
  fudBoost_lt: BigInt
  fudBoost_lte: BigInt
  fudBoost_not: BigInt
  fudBoost_not_in: [BigInt!]
  gotchi: String
  gotchi_: Aavegotchi_filter
  gotchi_contains: String
  gotchi_contains_nocase: String
  gotchi_ends_with: String
  gotchi_ends_with_nocase: String
  gotchi_gt: String
  gotchi_gte: String
  gotchi_in: [String!]
  gotchi_lt: String
  gotchi_lte: String
  gotchi_not: String
  gotchi_not_contains: String
  gotchi_not_contains_nocase: String
  gotchi_not_ends_with: String
  gotchi_not_ends_with_nocase: String
  gotchi_not_in: [String!]
  gotchi_not_starts_with: String
  gotchi_not_starts_with_nocase: String
  gotchi_starts_with: String
  gotchi_starts_with_nocase: String
  hauntId: BigInt
  hauntId_gt: BigInt
  hauntId_gte: BigInt
  hauntId_in: [BigInt!]
  hauntId_lt: BigInt
  hauntId_lte: BigInt
  hauntId_not: BigInt
  hauntId_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  kekBoost: BigInt
  kekBoost_gt: BigInt
  kekBoost_gte: BigInt
  kekBoost_in: [BigInt!]
  kekBoost_lt: BigInt
  kekBoost_lte: BigInt
  kekBoost_not: BigInt
  kekBoost_not_in: [BigInt!]
  kinship: BigInt
  kinship_gt: BigInt
  kinship_gte: BigInt
  kinship_in: [BigInt!]
  kinship_lt: BigInt
  kinship_lte: BigInt
  kinship_not: BigInt
  kinship_not_in: [BigInt!]
  modifiedRarityScore: BigInt
  modifiedRarityScore_gt: BigInt
  modifiedRarityScore_gte: BigInt
  modifiedRarityScore_in: [BigInt!]
  modifiedRarityScore_lt: BigInt
  modifiedRarityScore_lte: BigInt
  modifiedRarityScore_not: BigInt
  modifiedRarityScore_not_in: [BigInt!]
  nameLowerCase: String
  nameLowerCase_contains: String
  nameLowerCase_contains_nocase: String
  nameLowerCase_ends_with: String
  nameLowerCase_ends_with_nocase: String
  nameLowerCase_gt: String
  nameLowerCase_gte: String
  nameLowerCase_in: [String!]
  nameLowerCase_lt: String
  nameLowerCase_lte: String
  nameLowerCase_not: String
  nameLowerCase_not_contains: String
  nameLowerCase_not_contains_nocase: String
  nameLowerCase_not_ends_with: String
  nameLowerCase_not_ends_with_nocase: String
  nameLowerCase_not_in: [String!]
  nameLowerCase_not_starts_with: String
  nameLowerCase_not_starts_with_nocase: String
  nameLowerCase_starts_with: String
  nameLowerCase_starts_with_nocase: String
  nrgTrait: BigInt
  nrgTrait_gt: BigInt
  nrgTrait_gte: BigInt
  nrgTrait_in: [BigInt!]
  nrgTrait_lt: BigInt
  nrgTrait_lte: BigInt
  nrgTrait_not: BigInt
  nrgTrait_not_in: [BigInt!]
  or: [ERC721Listing_filter]
  parcel: String
  parcelHash: String
  parcelHash_contains: String
  parcelHash_contains_nocase: String
  parcelHash_ends_with: String
  parcelHash_ends_with_nocase: String
  parcelHash_gt: String
  parcelHash_gte: String
  parcelHash_in: [String!]
  parcelHash_lt: String
  parcelHash_lte: String
  parcelHash_not: String
  parcelHash_not_contains: String
  parcelHash_not_contains_nocase: String
  parcelHash_not_ends_with: String
  parcelHash_not_ends_with_nocase: String
  parcelHash_not_in: [String!]
  parcelHash_not_starts_with: String
  parcelHash_not_starts_with_nocase: String
  parcelHash_starts_with: String
  parcelHash_starts_with_nocase: String
  parcel_: Parcel_filter
  parcel_contains: String
  parcel_contains_nocase: String
  parcel_ends_with: String
  parcel_ends_with_nocase: String
  parcel_gt: String
  parcel_gte: String
  parcel_in: [String!]
  parcel_lt: String
  parcel_lte: String
  parcel_not: String
  parcel_not_contains: String
  parcel_not_contains_nocase: String
  parcel_not_ends_with: String
  parcel_not_ends_with_nocase: String
  parcel_not_in: [String!]
  parcel_not_starts_with: String
  parcel_not_starts_with_nocase: String
  parcel_starts_with: String
  parcel_starts_with_nocase: String
  portal: String
  portal_: Portal_filter
  portal_contains: String
  portal_contains_nocase: String
  portal_ends_with: String
  portal_ends_with_nocase: String
  portal_gt: String
  portal_gte: String
  portal_in: [String!]
  portal_lt: String
  portal_lte: String
  portal_not: String
  portal_not_contains: String
  portal_not_contains_nocase: String
  portal_not_ends_with: String
  portal_not_ends_with_nocase: String
  portal_not_in: [String!]
  portal_not_starts_with: String
  portal_not_starts_with_nocase: String
  portal_starts_with: String
  portal_starts_with_nocase: String
  priceInWei: BigInt
  priceInWei_gt: BigInt
  priceInWei_gte: BigInt
  priceInWei_in: [BigInt!]
  priceInWei_lt: BigInt
  priceInWei_lte: BigInt
  priceInWei_not: BigInt
  priceInWei_not_in: [BigInt!]
  priceUpdatedAt: BigInt
  priceUpdatedAt_gt: BigInt
  priceUpdatedAt_gte: BigInt
  priceUpdatedAt_in: [BigInt!]
  priceUpdatedAt_lt: BigInt
  priceUpdatedAt_lte: BigInt
  priceUpdatedAt_not: BigInt
  priceUpdatedAt_not_in: [BigInt!]
  recipient: Bytes
  recipient_contains: Bytes
  recipient_gt: Bytes
  recipient_gte: Bytes
  recipient_in: [Bytes!]
  recipient_lt: Bytes
  recipient_lte: Bytes
  recipient_not: Bytes
  recipient_not_contains: Bytes
  recipient_not_in: [Bytes!]
  seller: Bytes
  seller_contains: Bytes
  seller_gt: Bytes
  seller_gte: Bytes
  seller_in: [Bytes!]
  seller_lt: Bytes
  seller_lte: Bytes
  seller_not: Bytes
  seller_not_contains: Bytes
  seller_not_in: [Bytes!]
  size: BigInt
  size_gt: BigInt
  size_gte: BigInt
  size_in: [BigInt!]
  size_lt: BigInt
  size_lte: BigInt
  size_not: BigInt
  size_not_in: [BigInt!]
  soldBefore: Boolean
  soldBefore_in: [Boolean!]
  soldBefore_not: Boolean
  soldBefore_not_in: [Boolean!]
  spkTrait: BigInt
  spkTrait_gt: BigInt
  spkTrait_gte: BigInt
  spkTrait_in: [BigInt!]
  spkTrait_lt: BigInt
  spkTrait_lte: BigInt
  spkTrait_not: BigInt
  spkTrait_not_in: [BigInt!]
  timeCreated: BigInt
  timeCreated_gt: BigInt
  timeCreated_gte: BigInt
  timeCreated_in: [BigInt!]
  timeCreated_lt: BigInt
  timeCreated_lte: BigInt
  timeCreated_not: BigInt
  timeCreated_not_in: [BigInt!]
  timePurchased: BigInt
  timePurchased_gt: BigInt
  timePurchased_gte: BigInt
  timePurchased_in: [BigInt!]
  timePurchased_lt: BigInt
  timePurchased_lte: BigInt
  timePurchased_not: BigInt
  timePurchased_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
  whitelist: String
  whitelist_: Whitelist_filter
  whitelist_contains: String
  whitelist_contains_nocase: String
  whitelist_ends_with: String
  whitelist_ends_with_nocase: String
  whitelist_gt: String
  whitelist_gte: String
  whitelist_in: [String!]
  whitelist_lt: String
  whitelist_lte: String
  whitelist_not: String
  whitelist_not_contains: String
  whitelist_not_contains_nocase: String
  whitelist_not_ends_with: String
  whitelist_not_ends_with_nocase: String
  whitelist_not_in: [String!]
  whitelist_not_starts_with: String
  whitelist_not_starts_with_nocase: String
  whitelist_starts_with: String
  whitelist_starts_with_nocase: String
}

enum ERC721Listing_orderBy {
  aggTrait
  alphaBoost
  amountEquippedWearables
  baseRarityScore
  blockCreated
  brnTrait
  buyer
  cancelled
  category
  claimedAt
  collateral
  coordinateX
  coordinateY
  district
  equippedWearables
  erc721TokenAddress
  experience
  eycTrait
  eysTrait
  fakeGotchi_artist
  fakeGotchi_artistName
  fakeGotchi_artist__amountFakeGotchis
  fakeGotchi_artist__currentUniqueFakeGotchisOwned
  fakeGotchi_artist__currentUniqueFakeGotchisOwnedArray
  fakeGotchi_artist__fakeGotchis
  fakeGotchi_artist__id
  fakeGotchi_artist__totalFakeGotchisOwnedArray
  fakeGotchi_artist__totalUniqueFakeGotchisOwned
  fakeGotchi_artist__totalUniqueFakeGotchisOwnedArray
  fakeGotchi_description
  fakeGotchi_editions
  fakeGotchi_name
  fakeGotchi_publisher
  fakeGotchi_publisherName
  fakeGotchi_publisher__amountFakeGotchis
  fakeGotchi_publisher__currentUniqueFakeGotchisOwned
  fakeGotchi_publisher__currentUniqueFakeGotchisOwnedArray
  fakeGotchi_publisher__fakeGotchis
  fakeGotchi_publisher__id
  fakeGotchi_publisher__totalFakeGotchisOwnedArray
  fakeGotchi_publisher__totalUniqueFakeGotchisOwned
  fakeGotchi_publisher__totalUniqueFakeGotchisOwnedArray
  fomoBoost
  fudBoost
  gotchi
  gotchi__activeListing
  gotchi__baseRarityScore
  gotchi__claimedAt
  gotchi__claimedTime
  gotchi__collateral
  gotchi__createdAt
  gotchi__equippedSetID
  gotchi__equippedSetName
  gotchi__escrow
  gotchi__experience
  gotchi__gotchiId
  gotchi__hauntId
  gotchi__id
  gotchi__kinship
  gotchi__lastInteracted
  gotchi__lending
  gotchi__level
  gotchi__locked
  gotchi__minimumStake
  gotchi__modifiedRarityScore
  gotchi__name
  gotchi__nameLowerCase
  gotchi__possibleSets
  gotchi__randomNumber
  gotchi__stakedAmount
  gotchi__status
  gotchi__timesTraded
  gotchi__toNextLevel
  gotchi__usedSkillPoints
  gotchi__withSetsRarityScore
  hauntId
  id
  kekBoost
  kinship
  modifiedRarityScore
  nameLowerCase
  nrgTrait
  parcel
  parcelHash
  parcel__activeListing
  parcel__alphaBoost
  parcel__auctionId
  parcel__coordinateX
  parcel__coordinateY
  parcel__district
  parcel__fomoBoost
  parcel__fudBoost
  parcel__id
  parcel__kekBoost
  parcel__parcelHash
  parcel__parcelId
  parcel__size
  parcel__timesTraded
  parcel__tokenId
  portal
  portal__activeListing
  portal__boughtAt
  portal__claimedAt
  portal__claimedTime
  portal__gotchiId
  portal__hauntId
  portal__id
  portal__openedAt
  portal__status
  portal__timesTraded
  priceInWei
  priceUpdatedAt
  recipient
  seller
  size
  soldBefore
  spkTrait
  timeCreated
  timePurchased
  tokenId
  whitelist
  whitelist__id
  whitelist__maxBorrowLimit
  whitelist__name
  whitelist__ownerAddress
}

type ERC1155Listing {
  aggTraitModifier: BigInt
  brnTraitModifier: BigInt
  cancelled: Boolean!
  category: BigInt!
  erc1155TokenAddress: Bytes!
  erc1155TypeId: BigInt!
  eycTraitModifier: BigInt
  eysTraitModifier: BigInt
  id: ID!
  nrgTraitModifier: BigInt
  priceInWei: BigInt!
  priceUpdatedAt: BigInt
  quantity: BigInt!
  rarityLevel: BigInt
  rarityScoreModifier: BigInt
  seller: Bytes!
  sold: Boolean!
  spkTraitModifier: BigInt
  timeCreated: BigInt!
  timeLastPurchased: BigInt!
  whitelist: Whitelist
}

input ERC1155Listing_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  aggTraitModifier: BigInt
  aggTraitModifier_gt: BigInt
  aggTraitModifier_gte: BigInt
  aggTraitModifier_in: [BigInt!]
  aggTraitModifier_lt: BigInt
  aggTraitModifier_lte: BigInt
  aggTraitModifier_not: BigInt
  aggTraitModifier_not_in: [BigInt!]
  and: [ERC1155Listing_filter]
  brnTraitModifier: BigInt
  brnTraitModifier_gt: BigInt
  brnTraitModifier_gte: BigInt
  brnTraitModifier_in: [BigInt!]
  brnTraitModifier_lt: BigInt
  brnTraitModifier_lte: BigInt
  brnTraitModifier_not: BigInt
  brnTraitModifier_not_in: [BigInt!]
  cancelled: Boolean
  cancelled_in: [Boolean!]
  cancelled_not: Boolean
  cancelled_not_in: [Boolean!]
  category: BigInt
  category_gt: BigInt
  category_gte: BigInt
  category_in: [BigInt!]
  category_lt: BigInt
  category_lte: BigInt
  category_not: BigInt
  category_not_in: [BigInt!]
  erc1155TokenAddress: Bytes
  erc1155TokenAddress_contains: Bytes
  erc1155TokenAddress_gt: Bytes
  erc1155TokenAddress_gte: Bytes
  erc1155TokenAddress_in: [Bytes!]
  erc1155TokenAddress_lt: Bytes
  erc1155TokenAddress_lte: Bytes
  erc1155TokenAddress_not: Bytes
  erc1155TokenAddress_not_contains: Bytes
  erc1155TokenAddress_not_in: [Bytes!]
  erc1155TypeId: BigInt
  erc1155TypeId_gt: BigInt
  erc1155TypeId_gte: BigInt
  erc1155TypeId_in: [BigInt!]
  erc1155TypeId_lt: BigInt
  erc1155TypeId_lte: BigInt
  erc1155TypeId_not: BigInt
  erc1155TypeId_not_in: [BigInt!]
  eycTraitModifier: BigInt
  eycTraitModifier_gt: BigInt
  eycTraitModifier_gte: BigInt
  eycTraitModifier_in: [BigInt!]
  eycTraitModifier_lt: BigInt
  eycTraitModifier_lte: BigInt
  eycTraitModifier_not: BigInt
  eycTraitModifier_not_in: [BigInt!]
  eysTraitModifier: BigInt
  eysTraitModifier_gt: BigInt
  eysTraitModifier_gte: BigInt
  eysTraitModifier_in: [BigInt!]
  eysTraitModifier_lt: BigInt
  eysTraitModifier_lte: BigInt
  eysTraitModifier_not: BigInt
  eysTraitModifier_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  nrgTraitModifier: BigInt
  nrgTraitModifier_gt: BigInt
  nrgTraitModifier_gte: BigInt
  nrgTraitModifier_in: [BigInt!]
  nrgTraitModifier_lt: BigInt
  nrgTraitModifier_lte: BigInt
  nrgTraitModifier_not: BigInt
  nrgTraitModifier_not_in: [BigInt!]
  or: [ERC1155Listing_filter]
  priceInWei: BigInt
  priceInWei_gt: BigInt
  priceInWei_gte: BigInt
  priceInWei_in: [BigInt!]
  priceInWei_lt: BigInt
  priceInWei_lte: BigInt
  priceInWei_not: BigInt
  priceInWei_not_in: [BigInt!]
  priceUpdatedAt: BigInt
  priceUpdatedAt_gt: BigInt
  priceUpdatedAt_gte: BigInt
  priceUpdatedAt_in: [BigInt!]
  priceUpdatedAt_lt: BigInt
  priceUpdatedAt_lte: BigInt
  priceUpdatedAt_not: BigInt
  priceUpdatedAt_not_in: [BigInt!]
  quantity: BigInt
  quantity_gt: BigInt
  quantity_gte: BigInt
  quantity_in: [BigInt!]
  quantity_lt: BigInt
  quantity_lte: BigInt
  quantity_not: BigInt
  quantity_not_in: [BigInt!]
  rarityLevel: BigInt
  rarityLevel_gt: BigInt
  rarityLevel_gte: BigInt
  rarityLevel_in: [BigInt!]
  rarityLevel_lt: BigInt
  rarityLevel_lte: BigInt
  rarityLevel_not: BigInt
  rarityLevel_not_in: [BigInt!]
  rarityScoreModifier: BigInt
  rarityScoreModifier_gt: BigInt
  rarityScoreModifier_gte: BigInt
  rarityScoreModifier_in: [BigInt!]
  rarityScoreModifier_lt: BigInt
  rarityScoreModifier_lte: BigInt
  rarityScoreModifier_not: BigInt
  rarityScoreModifier_not_in: [BigInt!]
  seller: Bytes
  seller_contains: Bytes
  seller_gt: Bytes
  seller_gte: Bytes
  seller_in: [Bytes!]
  seller_lt: Bytes
  seller_lte: Bytes
  seller_not: Bytes
  seller_not_contains: Bytes
  seller_not_in: [Bytes!]
  sold: Boolean
  sold_in: [Boolean!]
  sold_not: Boolean
  sold_not_in: [Boolean!]
  spkTraitModifier: BigInt
  spkTraitModifier_gt: BigInt
  spkTraitModifier_gte: BigInt
  spkTraitModifier_in: [BigInt!]
  spkTraitModifier_lt: BigInt
  spkTraitModifier_lte: BigInt
  spkTraitModifier_not: BigInt
  spkTraitModifier_not_in: [BigInt!]
  timeCreated: BigInt
  timeCreated_gt: BigInt
  timeCreated_gte: BigInt
  timeCreated_in: [BigInt!]
  timeCreated_lt: BigInt
  timeCreated_lte: BigInt
  timeCreated_not: BigInt
  timeCreated_not_in: [BigInt!]
  timeLastPurchased: BigInt
  timeLastPurchased_gt: BigInt
  timeLastPurchased_gte: BigInt
  timeLastPurchased_in: [BigInt!]
  timeLastPurchased_lt: BigInt
  timeLastPurchased_lte: BigInt
  timeLastPurchased_not: BigInt
  timeLastPurchased_not_in: [BigInt!]
  whitelist: String
  whitelist_: Whitelist_filter
  whitelist_contains: String
  whitelist_contains_nocase: String
  whitelist_ends_with: String
  whitelist_ends_with_nocase: String
  whitelist_gt: String
  whitelist_gte: String
  whitelist_in: [String!]
  whitelist_lt: String
  whitelist_lte: String
  whitelist_not: String
  whitelist_not_contains: String
  whitelist_not_contains_nocase: String
  whitelist_not_ends_with: String
  whitelist_not_ends_with_nocase: String
  whitelist_not_in: [String!]
  whitelist_not_starts_with: String
  whitelist_not_starts_with_nocase: String
  whitelist_starts_with: String
  whitelist_starts_with_nocase: String
}

enum ERC1155Listing_orderBy {
  aggTraitModifier
  brnTraitModifier
  cancelled
  category
  erc1155TokenAddress
  erc1155TypeId
  eycTraitModifier
  eysTraitModifier
  id
  nrgTraitModifier
  priceInWei
  priceUpdatedAt
  quantity
  rarityLevel
  rarityScoreModifier
  seller
  sold
  spkTraitModifier
  timeCreated
  timeLastPurchased
  whitelist
  whitelist__id
  whitelist__maxBorrowLimit
  whitelist__name
  whitelist__ownerAddress
}

type ERC1155Purchase {
  buyer: Bytes!
  category: BigInt!
  erc1155TokenAddress: Bytes!
  erc1155TypeId: BigInt!
  id: ID!
  listingID: BigInt!
  priceInWei: BigInt!
  quantity: BigInt!
  rarityLevel: BigInt
  recipient: Bytes
  seller: Bytes!
  timeLastPurchased: BigInt!
}

input ERC1155Purchase_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ERC1155Purchase_filter]
  buyer: Bytes
  buyer_contains: Bytes
  buyer_gt: Bytes
  buyer_gte: Bytes
  buyer_in: [Bytes!]
  buyer_lt: Bytes
  buyer_lte: Bytes
  buyer_not: Bytes
  buyer_not_contains: Bytes
  buyer_not_in: [Bytes!]
  category: BigInt
  category_gt: BigInt
  category_gte: BigInt
  category_in: [BigInt!]
  category_lt: BigInt
  category_lte: BigInt
  category_not: BigInt
  category_not_in: [BigInt!]
  erc1155TokenAddress: Bytes
  erc1155TokenAddress_contains: Bytes
  erc1155TokenAddress_gt: Bytes
  erc1155TokenAddress_gte: Bytes
  erc1155TokenAddress_in: [Bytes!]
  erc1155TokenAddress_lt: Bytes
  erc1155TokenAddress_lte: Bytes
  erc1155TokenAddress_not: Bytes
  erc1155TokenAddress_not_contains: Bytes
  erc1155TokenAddress_not_in: [Bytes!]
  erc1155TypeId: BigInt
  erc1155TypeId_gt: BigInt
  erc1155TypeId_gte: BigInt
  erc1155TypeId_in: [BigInt!]
  erc1155TypeId_lt: BigInt
  erc1155TypeId_lte: BigInt
  erc1155TypeId_not: BigInt
  erc1155TypeId_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  listingID: BigInt
  listingID_gt: BigInt
  listingID_gte: BigInt
  listingID_in: [BigInt!]
  listingID_lt: BigInt
  listingID_lte: BigInt
  listingID_not: BigInt
  listingID_not_in: [BigInt!]
  or: [ERC1155Purchase_filter]
  priceInWei: BigInt
  priceInWei_gt: BigInt
  priceInWei_gte: BigInt
  priceInWei_in: [BigInt!]
  priceInWei_lt: BigInt
  priceInWei_lte: BigInt
  priceInWei_not: BigInt
  priceInWei_not_in: [BigInt!]
  quantity: BigInt
  quantity_gt: BigInt
  quantity_gte: BigInt
  quantity_in: [BigInt!]
  quantity_lt: BigInt
  quantity_lte: BigInt
  quantity_not: BigInt
  quantity_not_in: [BigInt!]
  rarityLevel: BigInt
  rarityLevel_gt: BigInt
  rarityLevel_gte: BigInt
  rarityLevel_in: [BigInt!]
  rarityLevel_lt: BigInt
  rarityLevel_lte: BigInt
  rarityLevel_not: BigInt
  rarityLevel_not_in: [BigInt!]
  recipient: Bytes
  recipient_contains: Bytes
  recipient_gt: Bytes
  recipient_gte: Bytes
  recipient_in: [Bytes!]
  recipient_lt: Bytes
  recipient_lte: Bytes
  recipient_not: Bytes
  recipient_not_contains: Bytes
  recipient_not_in: [Bytes!]
  seller: Bytes
  seller_contains: Bytes
  seller_gt: Bytes
  seller_gte: Bytes
  seller_in: [Bytes!]
  seller_lt: Bytes
  seller_lte: Bytes
  seller_not: Bytes
  seller_not_contains: Bytes
  seller_not_in: [Bytes!]
  timeLastPurchased: BigInt
  timeLastPurchased_gt: BigInt
  timeLastPurchased_gte: BigInt
  timeLastPurchased_in: [BigInt!]
  timeLastPurchased_lt: BigInt
  timeLastPurchased_lte: BigInt
  timeLastPurchased_not: BigInt
  timeLastPurchased_not_in: [BigInt!]
}

enum ERC1155Purchase_orderBy {
  buyer
  category
  erc1155TokenAddress
  erc1155TypeId
  id
  listingID
  priceInWei
  quantity
  rarityLevel
  recipient
  seller
  timeLastPurchased
}

type FakeGotchiCardBalance {
  account: User
  contract: Bytes!
  id: ID!
  token: BigInt!
  value: BigDecimal!
  valueExact: BigInt!
}

input FakeGotchiCardBalance_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_: User_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [FakeGotchiCardBalance_filter]
  contract: Bytes
  contract_contains: Bytes
  contract_gt: Bytes
  contract_gte: Bytes
  contract_in: [Bytes!]
  contract_lt: Bytes
  contract_lte: Bytes
  contract_not: Bytes
  contract_not_contains: Bytes
  contract_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [FakeGotchiCardBalance_filter]
  token: BigInt
  token_gt: BigInt
  token_gte: BigInt
  token_in: [BigInt!]
  token_lt: BigInt
  token_lte: BigInt
  token_not: BigInt
  token_not_in: [BigInt!]
  value: BigDecimal
  valueExact: BigInt
  valueExact_gt: BigInt
  valueExact_gte: BigInt
  valueExact_in: [BigInt!]
  valueExact_lt: BigInt
  valueExact_lte: BigInt
  valueExact_not: BigInt
  valueExact_not_in: [BigInt!]
  value_gt: BigDecimal
  value_gte: BigDecimal
  value_in: [BigDecimal!]
  value_lt: BigDecimal
  value_lte: BigDecimal
  value_not: BigDecimal
  value_not_in: [BigDecimal!]
}

enum FakeGotchiCardBalance_orderBy {
  account
  account__amountFakeGotchis
  account__currentUniqueFakeGotchisOwned
  account__currentUniqueFakeGotchisOwnedArray
  account__fakeGotchis
  account__id
  account__totalFakeGotchisOwnedArray
  account__totalUniqueFakeGotchisOwned
  account__totalUniqueFakeGotchisOwnedArray
  contract
  id
  token
  value
  valueExact
}

type FakeGotchiHolder {
  amount: Int
  fakeGotchiStats: FakeGotchiStatistic
  holder: User
  id: ID!
}

input FakeGotchiHolder_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  and: [FakeGotchiHolder_filter]
  fakeGotchiStats: String
  fakeGotchiStats_: FakeGotchiStatistic_filter
  fakeGotchiStats_contains: String
  fakeGotchiStats_contains_nocase: String
  fakeGotchiStats_ends_with: String
  fakeGotchiStats_ends_with_nocase: String
  fakeGotchiStats_gt: String
  fakeGotchiStats_gte: String
  fakeGotchiStats_in: [String!]
  fakeGotchiStats_lt: String
  fakeGotchiStats_lte: String
  fakeGotchiStats_not: String
  fakeGotchiStats_not_contains: String
  fakeGotchiStats_not_contains_nocase: String
  fakeGotchiStats_not_ends_with: String
  fakeGotchiStats_not_ends_with_nocase: String
  fakeGotchiStats_not_in: [String!]
  fakeGotchiStats_not_starts_with: String
  fakeGotchiStats_not_starts_with_nocase: String
  fakeGotchiStats_starts_with: String
  fakeGotchiStats_starts_with_nocase: String
  holder: String
  holder_: User_filter
  holder_contains: String
  holder_contains_nocase: String
  holder_ends_with: String
  holder_ends_with_nocase: String
  holder_gt: String
  holder_gte: String
  holder_in: [String!]
  holder_lt: String
  holder_lte: String
  holder_not: String
  holder_not_contains: String
  holder_not_contains_nocase: String
  holder_not_ends_with: String
  holder_not_ends_with_nocase: String
  holder_not_in: [String!]
  holder_not_starts_with: String
  holder_not_starts_with_nocase: String
  holder_starts_with: String
  holder_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [FakeGotchiHolder_filter]
}

enum FakeGotchiHolder_orderBy {
  amount
  fakeGotchiStats
  fakeGotchiStats__amountHolder
  fakeGotchiStats__burned
  fakeGotchiStats__id
  fakeGotchiStats__totalSupply
  holder
  holder__amountFakeGotchis
  holder__currentUniqueFakeGotchisOwned
  holder__currentUniqueFakeGotchisOwnedArray
  holder__fakeGotchis
  holder__id
  holder__totalFakeGotchisOwnedArray
  holder__totalUniqueFakeGotchisOwned
  holder__totalUniqueFakeGotchisOwnedArray
  id
}

type FakeGotchiNFTToken {
  approval: User!
  artist: User
  artistName: String
  contract: Bytes!
  description: String
  editions: Int
  externalLink: String
  fileHash: String
  id: ID!
  identifier: BigInt!
  metadata: MetadataActionLog
  name: String
  owner: User!
  publisher: User
  publisherName: String
  thumbnailHash: String
  thumbnailType: String
  uri: String
}

input FakeGotchiNFTToken_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FakeGotchiNFTToken_filter]
  approval: String
  approval_: User_filter
  approval_contains: String
  approval_contains_nocase: String
  approval_ends_with: String
  approval_ends_with_nocase: String
  approval_gt: String
  approval_gte: String
  approval_in: [String!]
  approval_lt: String
  approval_lte: String
  approval_not: String
  approval_not_contains: String
  approval_not_contains_nocase: String
  approval_not_ends_with: String
  approval_not_ends_with_nocase: String
  approval_not_in: [String!]
  approval_not_starts_with: String
  approval_not_starts_with_nocase: String
  approval_starts_with: String
  approval_starts_with_nocase: String
  artist: String
  artistName: String
  artistName_contains: String
  artistName_contains_nocase: String
  artistName_ends_with: String
  artistName_ends_with_nocase: String
  artistName_gt: String
  artistName_gte: String
  artistName_in: [String!]
  artistName_lt: String
  artistName_lte: String
  artistName_not: String
  artistName_not_contains: String
  artistName_not_contains_nocase: String
  artistName_not_ends_with: String
  artistName_not_ends_with_nocase: String
  artistName_not_in: [String!]
  artistName_not_starts_with: String
  artistName_not_starts_with_nocase: String
  artistName_starts_with: String
  artistName_starts_with_nocase: String
  artist_: User_filter
  artist_contains: String
  artist_contains_nocase: String
  artist_ends_with: String
  artist_ends_with_nocase: String
  artist_gt: String
  artist_gte: String
  artist_in: [String!]
  artist_lt: String
  artist_lte: String
  artist_not: String
  artist_not_contains: String
  artist_not_contains_nocase: String
  artist_not_ends_with: String
  artist_not_ends_with_nocase: String
  artist_not_in: [String!]
  artist_not_starts_with: String
  artist_not_starts_with_nocase: String
  artist_starts_with: String
  artist_starts_with_nocase: String
  contract: Bytes
  contract_contains: Bytes
  contract_gt: Bytes
  contract_gte: Bytes
  contract_in: [Bytes!]
  contract_lt: Bytes
  contract_lte: Bytes
  contract_not: Bytes
  contract_not_contains: Bytes
  contract_not_in: [Bytes!]
  description: String
  description_contains: String
  description_contains_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  editions: Int
  editions_gt: Int
  editions_gte: Int
  editions_in: [Int!]
  editions_lt: Int
  editions_lte: Int
  editions_not: Int
  editions_not_in: [Int!]
  externalLink: String
  externalLink_contains: String
  externalLink_contains_nocase: String
  externalLink_ends_with: String
  externalLink_ends_with_nocase: String
  externalLink_gt: String
  externalLink_gte: String
  externalLink_in: [String!]
  externalLink_lt: String
  externalLink_lte: String
  externalLink_not: String
  externalLink_not_contains: String
  externalLink_not_contains_nocase: String
  externalLink_not_ends_with: String
  externalLink_not_ends_with_nocase: String
  externalLink_not_in: [String!]
  externalLink_not_starts_with: String
  externalLink_not_starts_with_nocase: String
  externalLink_starts_with: String
  externalLink_starts_with_nocase: String
  fileHash: String
  fileHash_contains: String
  fileHash_contains_nocase: String
  fileHash_ends_with: String
  fileHash_ends_with_nocase: String
  fileHash_gt: String
  fileHash_gte: String
  fileHash_in: [String!]
  fileHash_lt: String
  fileHash_lte: String
  fileHash_not: String
  fileHash_not_contains: String
  fileHash_not_contains_nocase: String
  fileHash_not_ends_with: String
  fileHash_not_ends_with_nocase: String
  fileHash_not_in: [String!]
  fileHash_not_starts_with: String
  fileHash_not_starts_with_nocase: String
  fileHash_starts_with: String
  fileHash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  identifier: BigInt
  identifier_gt: BigInt
  identifier_gte: BigInt
  identifier_in: [BigInt!]
  identifier_lt: BigInt
  identifier_lte: BigInt
  identifier_not: BigInt
  identifier_not_in: [BigInt!]
  metadata: String
  metadata_: MetadataActionLog_filter
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_gt: String
  metadata_gte: String
  metadata_in: [String!]
  metadata_lt: String
  metadata_lte: String
  metadata_not: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_not_in: [String!]
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [FakeGotchiNFTToken_filter]
  owner: String
  owner_: User_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  publisher: String
  publisherName: String
  publisherName_contains: String
  publisherName_contains_nocase: String
  publisherName_ends_with: String
  publisherName_ends_with_nocase: String
  publisherName_gt: String
  publisherName_gte: String
  publisherName_in: [String!]
  publisherName_lt: String
  publisherName_lte: String
  publisherName_not: String
  publisherName_not_contains: String
  publisherName_not_contains_nocase: String
  publisherName_not_ends_with: String
  publisherName_not_ends_with_nocase: String
  publisherName_not_in: [String!]
  publisherName_not_starts_with: String
  publisherName_not_starts_with_nocase: String
  publisherName_starts_with: String
  publisherName_starts_with_nocase: String
  publisher_: User_filter
  publisher_contains: String
  publisher_contains_nocase: String
  publisher_ends_with: String
  publisher_ends_with_nocase: String
  publisher_gt: String
  publisher_gte: String
  publisher_in: [String!]
  publisher_lt: String
  publisher_lte: String
  publisher_not: String
  publisher_not_contains: String
  publisher_not_contains_nocase: String
  publisher_not_ends_with: String
  publisher_not_ends_with_nocase: String
  publisher_not_in: [String!]
  publisher_not_starts_with: String
  publisher_not_starts_with_nocase: String
  publisher_starts_with: String
  publisher_starts_with_nocase: String
  thumbnailHash: String
  thumbnailHash_contains: String
  thumbnailHash_contains_nocase: String
  thumbnailHash_ends_with: String
  thumbnailHash_ends_with_nocase: String
  thumbnailHash_gt: String
  thumbnailHash_gte: String
  thumbnailHash_in: [String!]
  thumbnailHash_lt: String
  thumbnailHash_lte: String
  thumbnailHash_not: String
  thumbnailHash_not_contains: String
  thumbnailHash_not_contains_nocase: String
  thumbnailHash_not_ends_with: String
  thumbnailHash_not_ends_with_nocase: String
  thumbnailHash_not_in: [String!]
  thumbnailHash_not_starts_with: String
  thumbnailHash_not_starts_with_nocase: String
  thumbnailHash_starts_with: String
  thumbnailHash_starts_with_nocase: String
  thumbnailType: String
  thumbnailType_contains: String
  thumbnailType_contains_nocase: String
  thumbnailType_ends_with: String
  thumbnailType_ends_with_nocase: String
  thumbnailType_gt: String
  thumbnailType_gte: String
  thumbnailType_in: [String!]
  thumbnailType_lt: String
  thumbnailType_lte: String
  thumbnailType_not: String
  thumbnailType_not_contains: String
  thumbnailType_not_contains_nocase: String
  thumbnailType_not_ends_with: String
  thumbnailType_not_ends_with_nocase: String
  thumbnailType_not_in: [String!]
  thumbnailType_not_starts_with: String
  thumbnailType_not_starts_with_nocase: String
  thumbnailType_starts_with: String
  thumbnailType_starts_with_nocase: String
  uri: String
  uri_contains: String
  uri_contains_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_gt: String
  uri_gte: String
  uri_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_not: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  uri_not_in: [String!]
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
}

enum FakeGotchiNFTToken_orderBy {
  approval
  approval__amountFakeGotchis
  approval__currentUniqueFakeGotchisOwned
  approval__currentUniqueFakeGotchisOwnedArray
  approval__fakeGotchis
  approval__id
  approval__totalFakeGotchisOwnedArray
  approval__totalUniqueFakeGotchisOwned
  approval__totalUniqueFakeGotchisOwnedArray
  artist
  artistName
  artist__amountFakeGotchis
  artist__currentUniqueFakeGotchisOwned
  artist__currentUniqueFakeGotchisOwnedArray
  artist__fakeGotchis
  artist__id
  artist__totalFakeGotchisOwnedArray
  artist__totalUniqueFakeGotchisOwned
  artist__totalUniqueFakeGotchisOwnedArray
  contract
  description
  editions
  externalLink
  fileHash
  id
  identifier
  metadata
  metadata__artistName
  metadata__createdAt
  metadata__description
  metadata__editions
  metadata__externalLink
  metadata__fileHash
  metadata__fileType
  metadata__flagCount
  metadata__id
  metadata__likeCount
  metadata__minted
  metadata__name
  metadata__publisherName
  metadata__status
  metadata__thumbnailHash
  metadata__thumbnailType
  metadata__timestamp
  name
  owner
  owner__amountFakeGotchis
  owner__currentUniqueFakeGotchisOwned
  owner__currentUniqueFakeGotchisOwnedArray
  owner__fakeGotchis
  owner__id
  owner__totalFakeGotchisOwnedArray
  owner__totalUniqueFakeGotchisOwned
  owner__totalUniqueFakeGotchisOwnedArray
  publisher
  publisherName
  publisher__amountFakeGotchis
  publisher__currentUniqueFakeGotchisOwned
  publisher__currentUniqueFakeGotchisOwnedArray
  publisher__fakeGotchis
  publisher__id
  publisher__totalFakeGotchisOwnedArray
  publisher__totalUniqueFakeGotchisOwned
  publisher__totalUniqueFakeGotchisOwnedArray
  thumbnailHash
  thumbnailType
  uri
}

type FakeGotchiNFTTransfer {
  from: User!
  id: ID!
  timestamp: BigInt!
  to: User!
  token: FakeGotchiNFTToken!
  transaction: Bytes!
}

input FakeGotchiNFTTransfer_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FakeGotchiNFTTransfer_filter]
  from: String
  from_: User_filter
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [FakeGotchiNFTTransfer_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  to: String
  to_: User_filter
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  token: String
  token_: FakeGotchiNFTToken_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  transaction: Bytes
  transaction_contains: Bytes
  transaction_gt: Bytes
  transaction_gte: Bytes
  transaction_in: [Bytes!]
  transaction_lt: Bytes
  transaction_lte: Bytes
  transaction_not: Bytes
  transaction_not_contains: Bytes
  transaction_not_in: [Bytes!]
}

enum FakeGotchiNFTTransfer_orderBy {
  from
  from__amountFakeGotchis
  from__currentUniqueFakeGotchisOwned
  from__currentUniqueFakeGotchisOwnedArray
  from__fakeGotchis
  from__id
  from__totalFakeGotchisOwnedArray
  from__totalUniqueFakeGotchisOwned
  from__totalUniqueFakeGotchisOwnedArray
  id
  timestamp
  to
  to__amountFakeGotchis
  to__currentUniqueFakeGotchisOwned
  to__currentUniqueFakeGotchisOwnedArray
  to__fakeGotchis
  to__id
  to__totalFakeGotchisOwnedArray
  to__totalUniqueFakeGotchisOwned
  to__totalUniqueFakeGotchisOwnedArray
  token
  token__artistName
  token__contract
  token__description
  token__editions
  token__externalLink
  token__fileHash
  token__id
  token__identifier
  token__name
  token__publisherName
  token__thumbnailHash
  token__thumbnailType
  token__uri
  transaction
}

type FakeGotchiStatistic {
  amountHolder: Int
  burned: Int
  holders(first: Int = 100, orderBy: FakeGotchiHolder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FakeGotchiHolder_filter): [FakeGotchiHolder!]!
  id: ID!
  metadata: MetadataActionLog
  tokenIds: [BigInt!]!
  totalSupply: Int
}

input FakeGotchiStatistic_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amountHolder: Int
  amountHolder_gt: Int
  amountHolder_gte: Int
  amountHolder_in: [Int!]
  amountHolder_lt: Int
  amountHolder_lte: Int
  amountHolder_not: Int
  amountHolder_not_in: [Int!]
  and: [FakeGotchiStatistic_filter]
  burned: Int
  burned_gt: Int
  burned_gte: Int
  burned_in: [Int!]
  burned_lt: Int
  burned_lte: Int
  burned_not: Int
  burned_not_in: [Int!]
  holders_: FakeGotchiHolder_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  metadata: String
  metadata_: MetadataActionLog_filter
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_gt: String
  metadata_gte: String
  metadata_in: [String!]
  metadata_lt: String
  metadata_lte: String
  metadata_not: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_not_in: [String!]
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  or: [FakeGotchiStatistic_filter]
  tokenIds: [BigInt!]
  tokenIds_contains: [BigInt!]
  tokenIds_contains_nocase: [BigInt!]
  tokenIds_not: [BigInt!]
  tokenIds_not_contains: [BigInt!]
  tokenIds_not_contains_nocase: [BigInt!]
  totalSupply: Int
  totalSupply_gt: Int
  totalSupply_gte: Int
  totalSupply_in: [Int!]
  totalSupply_lt: Int
  totalSupply_lte: Int
  totalSupply_not: Int
  totalSupply_not_in: [Int!]
}

enum FakeGotchiStatistic_orderBy {
  amountHolder
  burned
  holders
  id
  metadata
  metadata__artistName
  metadata__createdAt
  metadata__description
  metadata__editions
  metadata__externalLink
  metadata__fileHash
  metadata__fileType
  metadata__flagCount
  metadata__id
  metadata__likeCount
  metadata__minted
  metadata__name
  metadata__publisherName
  metadata__status
  metadata__thumbnailHash
  metadata__thumbnailType
  metadata__timestamp
  tokenIds
  totalSupply
}

type Generation {
  amount: Int

  """a generation is a series"""
  id: ID!
}

input Generation_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: Int
  amount_gt: Int
  amount_gte: Int
  amount_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_not: Int
  amount_not_in: [Int!]
  and: [Generation_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Generation_filter]
}

enum Generation_orderBy {
  amount
  id
}

type GotchiLending {
  borrower: Bytes
  cancelled: Boolean!
  channellingAllowed: Boolean!
  claimed(first: Int = 100, orderBy: ClaimedToken_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ClaimedToken_filter): [ClaimedToken!]!
  completed: Boolean!
  gotchi: Aavegotchi!
  gotchiBRS: BigInt
  gotchiKinship: BigInt
  gotchiTokenId: BigInt!
  id: ID!
  lastClaimed: BigInt
  lender: Bytes
  originalOwner: Bytes
  period: BigInt!
  rentDuration: BigInt!
  splitBorrower: BigInt
  splitOther: BigInt
  splitOwner: BigInt
  thirdPartyAddress: Bytes
  timeAgreed: BigInt
  timeCreated: BigInt
  timeEnded: BigInt
  tokensToShare: [Bytes!]!
  upfrontCost: BigInt!
  whitelist: Whitelist
  whitelistId: BigInt
  whitelistMembers: [Bytes!]!
}

input GotchiLending_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GotchiLending_filter]
  borrower: Bytes
  borrower_contains: Bytes
  borrower_gt: Bytes
  borrower_gte: Bytes
  borrower_in: [Bytes!]
  borrower_lt: Bytes
  borrower_lte: Bytes
  borrower_not: Bytes
  borrower_not_contains: Bytes
  borrower_not_in: [Bytes!]
  cancelled: Boolean
  cancelled_in: [Boolean!]
  cancelled_not: Boolean
  cancelled_not_in: [Boolean!]
  channellingAllowed: Boolean
  channellingAllowed_in: [Boolean!]
  channellingAllowed_not: Boolean
  channellingAllowed_not_in: [Boolean!]
  claimed_: ClaimedToken_filter
  completed: Boolean
  completed_in: [Boolean!]
  completed_not: Boolean
  completed_not_in: [Boolean!]
  gotchi: String
  gotchiBRS: BigInt
  gotchiBRS_gt: BigInt
  gotchiBRS_gte: BigInt
  gotchiBRS_in: [BigInt!]
  gotchiBRS_lt: BigInt
  gotchiBRS_lte: BigInt
  gotchiBRS_not: BigInt
  gotchiBRS_not_in: [BigInt!]
  gotchiKinship: BigInt
  gotchiKinship_gt: BigInt
  gotchiKinship_gte: BigInt
  gotchiKinship_in: [BigInt!]
  gotchiKinship_lt: BigInt
  gotchiKinship_lte: BigInt
  gotchiKinship_not: BigInt
  gotchiKinship_not_in: [BigInt!]
  gotchiTokenId: BigInt
  gotchiTokenId_gt: BigInt
  gotchiTokenId_gte: BigInt
  gotchiTokenId_in: [BigInt!]
  gotchiTokenId_lt: BigInt
  gotchiTokenId_lte: BigInt
  gotchiTokenId_not: BigInt
  gotchiTokenId_not_in: [BigInt!]
  gotchi_: Aavegotchi_filter
  gotchi_contains: String
  gotchi_contains_nocase: String
  gotchi_ends_with: String
  gotchi_ends_with_nocase: String
  gotchi_gt: String
  gotchi_gte: String
  gotchi_in: [String!]
  gotchi_lt: String
  gotchi_lte: String
  gotchi_not: String
  gotchi_not_contains: String
  gotchi_not_contains_nocase: String
  gotchi_not_ends_with: String
  gotchi_not_ends_with_nocase: String
  gotchi_not_in: [String!]
  gotchi_not_starts_with: String
  gotchi_not_starts_with_nocase: String
  gotchi_starts_with: String
  gotchi_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lastClaimed: BigInt
  lastClaimed_gt: BigInt
  lastClaimed_gte: BigInt
  lastClaimed_in: [BigInt!]
  lastClaimed_lt: BigInt
  lastClaimed_lte: BigInt
  lastClaimed_not: BigInt
  lastClaimed_not_in: [BigInt!]
  lender: Bytes
  lender_contains: Bytes
  lender_gt: Bytes
  lender_gte: Bytes
  lender_in: [Bytes!]
  lender_lt: Bytes
  lender_lte: Bytes
  lender_not: Bytes
  lender_not_contains: Bytes
  lender_not_in: [Bytes!]
  or: [GotchiLending_filter]
  originalOwner: Bytes
  originalOwner_contains: Bytes
  originalOwner_gt: Bytes
  originalOwner_gte: Bytes
  originalOwner_in: [Bytes!]
  originalOwner_lt: Bytes
  originalOwner_lte: Bytes
  originalOwner_not: Bytes
  originalOwner_not_contains: Bytes
  originalOwner_not_in: [Bytes!]
  period: BigInt
  period_gt: BigInt
  period_gte: BigInt
  period_in: [BigInt!]
  period_lt: BigInt
  period_lte: BigInt
  period_not: BigInt
  period_not_in: [BigInt!]
  rentDuration: BigInt
  rentDuration_gt: BigInt
  rentDuration_gte: BigInt
  rentDuration_in: [BigInt!]
  rentDuration_lt: BigInt
  rentDuration_lte: BigInt
  rentDuration_not: BigInt
  rentDuration_not_in: [BigInt!]
  splitBorrower: BigInt
  splitBorrower_gt: BigInt
  splitBorrower_gte: BigInt
  splitBorrower_in: [BigInt!]
  splitBorrower_lt: BigInt
  splitBorrower_lte: BigInt
  splitBorrower_not: BigInt
  splitBorrower_not_in: [BigInt!]
  splitOther: BigInt
  splitOther_gt: BigInt
  splitOther_gte: BigInt
  splitOther_in: [BigInt!]
  splitOther_lt: BigInt
  splitOther_lte: BigInt
  splitOther_not: BigInt
  splitOther_not_in: [BigInt!]
  splitOwner: BigInt
  splitOwner_gt: BigInt
  splitOwner_gte: BigInt
  splitOwner_in: [BigInt!]
  splitOwner_lt: BigInt
  splitOwner_lte: BigInt
  splitOwner_not: BigInt
  splitOwner_not_in: [BigInt!]
  thirdPartyAddress: Bytes
  thirdPartyAddress_contains: Bytes
  thirdPartyAddress_gt: Bytes
  thirdPartyAddress_gte: Bytes
  thirdPartyAddress_in: [Bytes!]
  thirdPartyAddress_lt: Bytes
  thirdPartyAddress_lte: Bytes
  thirdPartyAddress_not: Bytes
  thirdPartyAddress_not_contains: Bytes
  thirdPartyAddress_not_in: [Bytes!]
  timeAgreed: BigInt
  timeAgreed_gt: BigInt
  timeAgreed_gte: BigInt
  timeAgreed_in: [BigInt!]
  timeAgreed_lt: BigInt
  timeAgreed_lte: BigInt
  timeAgreed_not: BigInt
  timeAgreed_not_in: [BigInt!]
  timeCreated: BigInt
  timeCreated_gt: BigInt
  timeCreated_gte: BigInt
  timeCreated_in: [BigInt!]
  timeCreated_lt: BigInt
  timeCreated_lte: BigInt
  timeCreated_not: BigInt
  timeCreated_not_in: [BigInt!]
  timeEnded: BigInt
  timeEnded_gt: BigInt
  timeEnded_gte: BigInt
  timeEnded_in: [BigInt!]
  timeEnded_lt: BigInt
  timeEnded_lte: BigInt
  timeEnded_not: BigInt
  timeEnded_not_in: [BigInt!]
  tokensToShare: [Bytes!]
  tokensToShare_contains: [Bytes!]
  tokensToShare_contains_nocase: [Bytes!]
  tokensToShare_not: [Bytes!]
  tokensToShare_not_contains: [Bytes!]
  tokensToShare_not_contains_nocase: [Bytes!]
  upfrontCost: BigInt
  upfrontCost_gt: BigInt
  upfrontCost_gte: BigInt
  upfrontCost_in: [BigInt!]
  upfrontCost_lt: BigInt
  upfrontCost_lte: BigInt
  upfrontCost_not: BigInt
  upfrontCost_not_in: [BigInt!]
  whitelist: String
  whitelistId: BigInt
  whitelistId_gt: BigInt
  whitelistId_gte: BigInt
  whitelistId_in: [BigInt!]
  whitelistId_lt: BigInt
  whitelistId_lte: BigInt
  whitelistId_not: BigInt
  whitelistId_not_in: [BigInt!]
  whitelistMembers: [Bytes!]
  whitelistMembers_contains: [Bytes!]
  whitelistMembers_contains_nocase: [Bytes!]
  whitelistMembers_not: [Bytes!]
  whitelistMembers_not_contains: [Bytes!]
  whitelistMembers_not_contains_nocase: [Bytes!]
  whitelist_: Whitelist_filter
  whitelist_contains: String
  whitelist_contains_nocase: String
  whitelist_ends_with: String
  whitelist_ends_with_nocase: String
  whitelist_gt: String
  whitelist_gte: String
  whitelist_in: [String!]
  whitelist_lt: String
  whitelist_lte: String
  whitelist_not: String
  whitelist_not_contains: String
  whitelist_not_contains_nocase: String
  whitelist_not_ends_with: String
  whitelist_not_ends_with_nocase: String
  whitelist_not_in: [String!]
  whitelist_not_starts_with: String
  whitelist_not_starts_with_nocase: String
  whitelist_starts_with: String
  whitelist_starts_with_nocase: String
}

enum GotchiLending_orderBy {
  borrower
  cancelled
  channellingAllowed
  claimed
  completed
  gotchi
  gotchiBRS
  gotchiKinship
  gotchiTokenId
  gotchi__activeListing
  gotchi__baseRarityScore
  gotchi__claimedAt
  gotchi__claimedTime
  gotchi__collateral
  gotchi__createdAt
  gotchi__equippedSetID
  gotchi__equippedSetName
  gotchi__escrow
  gotchi__experience
  gotchi__gotchiId
  gotchi__hauntId
  gotchi__id
  gotchi__kinship
  gotchi__lastInteracted
  gotchi__lending
  gotchi__level
  gotchi__locked
  gotchi__minimumStake
  gotchi__modifiedRarityScore
  gotchi__name
  gotchi__nameLowerCase
  gotchi__possibleSets
  gotchi__randomNumber
  gotchi__stakedAmount
  gotchi__status
  gotchi__timesTraded
  gotchi__toNextLevel
  gotchi__usedSkillPoints
  gotchi__withSetsRarityScore
  id
  lastClaimed
  lender
  originalOwner
  period
  rentDuration
  splitBorrower
  splitOther
  splitOwner
  thirdPartyAddress
  timeAgreed
  timeCreated
  timeEnded
  tokensToShare
  upfrontCost
  whitelist
  whitelistId
  whitelistMembers
  whitelist__id
  whitelist__maxBorrowLimit
  whitelist__name
  whitelist__ownerAddress
}

"8 bytes signed integer\n"
scalar Int8

type ItemType {
  author: String
  canBeTransferred: Boolean!
  canPurchaseWithGhst: Boolean!
  category: Int!
  consumed: BigInt!
  desc: String
  experienceBonus: BigInt
  ghstPrice: BigInt!
  id: ID!
  kinshipBonus: Int
  maxQuantity: BigInt!
  minLevel: Int
  name: String!
  rarityScoreModifier: Int!
  slotPositions: [Boolean!]
  svgId: BigInt!
  totalQuantity: BigInt!
  traitModifiers: [Int!]
}

input ItemType_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ItemType_filter]
  author: String
  author_contains: String
  author_contains_nocase: String
  author_ends_with: String
  author_ends_with_nocase: String
  author_gt: String
  author_gte: String
  author_in: [String!]
  author_lt: String
  author_lte: String
  author_not: String
  author_not_contains: String
  author_not_contains_nocase: String
  author_not_ends_with: String
  author_not_ends_with_nocase: String
  author_not_in: [String!]
  author_not_starts_with: String
  author_not_starts_with_nocase: String
  author_starts_with: String
  author_starts_with_nocase: String
  canBeTransferred: Boolean
  canBeTransferred_in: [Boolean!]
  canBeTransferred_not: Boolean
  canBeTransferred_not_in: [Boolean!]
  canPurchaseWithGhst: Boolean
  canPurchaseWithGhst_in: [Boolean!]
  canPurchaseWithGhst_not: Boolean
  canPurchaseWithGhst_not_in: [Boolean!]
  category: Int
  category_gt: Int
  category_gte: Int
  category_in: [Int!]
  category_lt: Int
  category_lte: Int
  category_not: Int
  category_not_in: [Int!]
  consumed: BigInt
  consumed_gt: BigInt
  consumed_gte: BigInt
  consumed_in: [BigInt!]
  consumed_lt: BigInt
  consumed_lte: BigInt
  consumed_not: BigInt
  consumed_not_in: [BigInt!]
  desc: String
  desc_contains: String
  desc_contains_nocase: String
  desc_ends_with: String
  desc_ends_with_nocase: String
  desc_gt: String
  desc_gte: String
  desc_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_not: String
  desc_not_contains: String
  desc_not_contains_nocase: String
  desc_not_ends_with: String
  desc_not_ends_with_nocase: String
  desc_not_in: [String!]
  desc_not_starts_with: String
  desc_not_starts_with_nocase: String
  desc_starts_with: String
  desc_starts_with_nocase: String
  experienceBonus: BigInt
  experienceBonus_gt: BigInt
  experienceBonus_gte: BigInt
  experienceBonus_in: [BigInt!]
  experienceBonus_lt: BigInt
  experienceBonus_lte: BigInt
  experienceBonus_not: BigInt
  experienceBonus_not_in: [BigInt!]
  ghstPrice: BigInt
  ghstPrice_gt: BigInt
  ghstPrice_gte: BigInt
  ghstPrice_in: [BigInt!]
  ghstPrice_lt: BigInt
  ghstPrice_lte: BigInt
  ghstPrice_not: BigInt
  ghstPrice_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  kinshipBonus: Int
  kinshipBonus_gt: Int
  kinshipBonus_gte: Int
  kinshipBonus_in: [Int!]
  kinshipBonus_lt: Int
  kinshipBonus_lte: Int
  kinshipBonus_not: Int
  kinshipBonus_not_in: [Int!]
  maxQuantity: BigInt
  maxQuantity_gt: BigInt
  maxQuantity_gte: BigInt
  maxQuantity_in: [BigInt!]
  maxQuantity_lt: BigInt
  maxQuantity_lte: BigInt
  maxQuantity_not: BigInt
  maxQuantity_not_in: [BigInt!]
  minLevel: Int
  minLevel_gt: Int
  minLevel_gte: Int
  minLevel_in: [Int!]
  minLevel_lt: Int
  minLevel_lte: Int
  minLevel_not: Int
  minLevel_not_in: [Int!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [ItemType_filter]
  rarityScoreModifier: Int
  rarityScoreModifier_gt: Int
  rarityScoreModifier_gte: Int
  rarityScoreModifier_in: [Int!]
  rarityScoreModifier_lt: Int
  rarityScoreModifier_lte: Int
  rarityScoreModifier_not: Int
  rarityScoreModifier_not_in: [Int!]
  slotPositions: [Boolean!]
  slotPositions_contains: [Boolean!]
  slotPositions_contains_nocase: [Boolean!]
  slotPositions_not: [Boolean!]
  slotPositions_not_contains: [Boolean!]
  slotPositions_not_contains_nocase: [Boolean!]
  svgId: BigInt
  svgId_gt: BigInt
  svgId_gte: BigInt
  svgId_in: [BigInt!]
  svgId_lt: BigInt
  svgId_lte: BigInt
  svgId_not: BigInt
  svgId_not_in: [BigInt!]
  totalQuantity: BigInt
  totalQuantity_gt: BigInt
  totalQuantity_gte: BigInt
  totalQuantity_in: [BigInt!]
  totalQuantity_lt: BigInt
  totalQuantity_lte: BigInt
  totalQuantity_not: BigInt
  totalQuantity_not_in: [BigInt!]
  traitModifiers: [Int!]
  traitModifiers_contains: [Int!]
  traitModifiers_contains_nocase: [Int!]
  traitModifiers_not: [Int!]
  traitModifiers_not_contains: [Int!]
  traitModifiers_not_contains_nocase: [Int!]
}

enum ItemType_orderBy {
  author
  canBeTransferred
  canPurchaseWithGhst
  category
  consumed
  desc
  experienceBonus
  ghstPrice
  id
  kinshipBonus
  maxQuantity
  minLevel
  name
  rarityScoreModifier
  slotPositions
  svgId
  totalQuantity
  traitModifiers
}

type MetadataActionLog {
  artist: User
  artistName: String
  createdAt: BigInt
  description: String
  editions: Int
  emitter: User!
  externalLink: String
  fileHash: String
  fileType: String
  flagCount: Int
  id: ID!
  likeCount: Int
  minted: Boolean
  name: String
  publisher: User
  publisherName: String
  royalty: [Int!]
  sender: User
  status: Int
  thumbnailHash: String
  thumbnailType: String
  timestamp: BigInt!
}

input MetadataActionLog_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MetadataActionLog_filter]
  artist: String
  artistName: String
  artistName_contains: String
  artistName_contains_nocase: String
  artistName_ends_with: String
  artistName_ends_with_nocase: String
  artistName_gt: String
  artistName_gte: String
  artistName_in: [String!]
  artistName_lt: String
  artistName_lte: String
  artistName_not: String
  artistName_not_contains: String
  artistName_not_contains_nocase: String
  artistName_not_ends_with: String
  artistName_not_ends_with_nocase: String
  artistName_not_in: [String!]
  artistName_not_starts_with: String
  artistName_not_starts_with_nocase: String
  artistName_starts_with: String
  artistName_starts_with_nocase: String
  artist_: User_filter
  artist_contains: String
  artist_contains_nocase: String
  artist_ends_with: String
  artist_ends_with_nocase: String
  artist_gt: String
  artist_gte: String
  artist_in: [String!]
  artist_lt: String
  artist_lte: String
  artist_not: String
  artist_not_contains: String
  artist_not_contains_nocase: String
  artist_not_ends_with: String
  artist_not_ends_with_nocase: String
  artist_not_in: [String!]
  artist_not_starts_with: String
  artist_not_starts_with_nocase: String
  artist_starts_with: String
  artist_starts_with_nocase: String
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  description: String
  description_contains: String
  description_contains_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  editions: Int
  editions_gt: Int
  editions_gte: Int
  editions_in: [Int!]
  editions_lt: Int
  editions_lte: Int
  editions_not: Int
  editions_not_in: [Int!]
  emitter: String
  emitter_: User_filter
  emitter_contains: String
  emitter_contains_nocase: String
  emitter_ends_with: String
  emitter_ends_with_nocase: String
  emitter_gt: String
  emitter_gte: String
  emitter_in: [String!]
  emitter_lt: String
  emitter_lte: String
  emitter_not: String
  emitter_not_contains: String
  emitter_not_contains_nocase: String
  emitter_not_ends_with: String
  emitter_not_ends_with_nocase: String
  emitter_not_in: [String!]
  emitter_not_starts_with: String
  emitter_not_starts_with_nocase: String
  emitter_starts_with: String
  emitter_starts_with_nocase: String
  externalLink: String
  externalLink_contains: String
  externalLink_contains_nocase: String
  externalLink_ends_with: String
  externalLink_ends_with_nocase: String
  externalLink_gt: String
  externalLink_gte: String
  externalLink_in: [String!]
  externalLink_lt: String
  externalLink_lte: String
  externalLink_not: String
  externalLink_not_contains: String
  externalLink_not_contains_nocase: String
  externalLink_not_ends_with: String
  externalLink_not_ends_with_nocase: String
  externalLink_not_in: [String!]
  externalLink_not_starts_with: String
  externalLink_not_starts_with_nocase: String
  externalLink_starts_with: String
  externalLink_starts_with_nocase: String
  fileHash: String
  fileHash_contains: String
  fileHash_contains_nocase: String
  fileHash_ends_with: String
  fileHash_ends_with_nocase: String
  fileHash_gt: String
  fileHash_gte: String
  fileHash_in: [String!]
  fileHash_lt: String
  fileHash_lte: String
  fileHash_not: String
  fileHash_not_contains: String
  fileHash_not_contains_nocase: String
  fileHash_not_ends_with: String
  fileHash_not_ends_with_nocase: String
  fileHash_not_in: [String!]
  fileHash_not_starts_with: String
  fileHash_not_starts_with_nocase: String
  fileHash_starts_with: String
  fileHash_starts_with_nocase: String
  fileType: String
  fileType_contains: String
  fileType_contains_nocase: String
  fileType_ends_with: String
  fileType_ends_with_nocase: String
  fileType_gt: String
  fileType_gte: String
  fileType_in: [String!]
  fileType_lt: String
  fileType_lte: String
  fileType_not: String
  fileType_not_contains: String
  fileType_not_contains_nocase: String
  fileType_not_ends_with: String
  fileType_not_ends_with_nocase: String
  fileType_not_in: [String!]
  fileType_not_starts_with: String
  fileType_not_starts_with_nocase: String
  fileType_starts_with: String
  fileType_starts_with_nocase: String
  flagCount: Int
  flagCount_gt: Int
  flagCount_gte: Int
  flagCount_in: [Int!]
  flagCount_lt: Int
  flagCount_lte: Int
  flagCount_not: Int
  flagCount_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  likeCount: Int
  likeCount_gt: Int
  likeCount_gte: Int
  likeCount_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_not: Int
  likeCount_not_in: [Int!]
  minted: Boolean
  minted_in: [Boolean!]
  minted_not: Boolean
  minted_not_in: [Boolean!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [MetadataActionLog_filter]
  publisher: String
  publisherName: String
  publisherName_contains: String
  publisherName_contains_nocase: String
  publisherName_ends_with: String
  publisherName_ends_with_nocase: String
  publisherName_gt: String
  publisherName_gte: String
  publisherName_in: [String!]
  publisherName_lt: String
  publisherName_lte: String
  publisherName_not: String
  publisherName_not_contains: String
  publisherName_not_contains_nocase: String
  publisherName_not_ends_with: String
  publisherName_not_ends_with_nocase: String
  publisherName_not_in: [String!]
  publisherName_not_starts_with: String
  publisherName_not_starts_with_nocase: String
  publisherName_starts_with: String
  publisherName_starts_with_nocase: String
  publisher_: User_filter
  publisher_contains: String
  publisher_contains_nocase: String
  publisher_ends_with: String
  publisher_ends_with_nocase: String
  publisher_gt: String
  publisher_gte: String
  publisher_in: [String!]
  publisher_lt: String
  publisher_lte: String
  publisher_not: String
  publisher_not_contains: String
  publisher_not_contains_nocase: String
  publisher_not_ends_with: String
  publisher_not_ends_with_nocase: String
  publisher_not_in: [String!]
  publisher_not_starts_with: String
  publisher_not_starts_with_nocase: String
  publisher_starts_with: String
  publisher_starts_with_nocase: String
  royalty: [Int!]
  royalty_contains: [Int!]
  royalty_contains_nocase: [Int!]
  royalty_not: [Int!]
  royalty_not_contains: [Int!]
  royalty_not_contains_nocase: [Int!]
  sender: String
  sender_: User_filter
  sender_contains: String
  sender_contains_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_gt: String
  sender_gte: String
  sender_in: [String!]
  sender_lt: String
  sender_lte: String
  sender_not: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_not_in: [String!]
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  status: Int
  status_gt: Int
  status_gte: Int
  status_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_not: Int
  status_not_in: [Int!]
  thumbnailHash: String
  thumbnailHash_contains: String
  thumbnailHash_contains_nocase: String
  thumbnailHash_ends_with: String
  thumbnailHash_ends_with_nocase: String
  thumbnailHash_gt: String
  thumbnailHash_gte: String
  thumbnailHash_in: [String!]
  thumbnailHash_lt: String
  thumbnailHash_lte: String
  thumbnailHash_not: String
  thumbnailHash_not_contains: String
  thumbnailHash_not_contains_nocase: String
  thumbnailHash_not_ends_with: String
  thumbnailHash_not_ends_with_nocase: String
  thumbnailHash_not_in: [String!]
  thumbnailHash_not_starts_with: String
  thumbnailHash_not_starts_with_nocase: String
  thumbnailHash_starts_with: String
  thumbnailHash_starts_with_nocase: String
  thumbnailType: String
  thumbnailType_contains: String
  thumbnailType_contains_nocase: String
  thumbnailType_ends_with: String
  thumbnailType_ends_with_nocase: String
  thumbnailType_gt: String
  thumbnailType_gte: String
  thumbnailType_in: [String!]
  thumbnailType_lt: String
  thumbnailType_lte: String
  thumbnailType_not: String
  thumbnailType_not_contains: String
  thumbnailType_not_contains_nocase: String
  thumbnailType_not_ends_with: String
  thumbnailType_not_ends_with_nocase: String
  thumbnailType_not_in: [String!]
  thumbnailType_not_starts_with: String
  thumbnailType_not_starts_with_nocase: String
  thumbnailType_starts_with: String
  thumbnailType_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum MetadataActionLog_orderBy {
  artist
  artistName
  artist__amountFakeGotchis
  artist__currentUniqueFakeGotchisOwned
  artist__currentUniqueFakeGotchisOwnedArray
  artist__fakeGotchis
  artist__id
  artist__totalFakeGotchisOwnedArray
  artist__totalUniqueFakeGotchisOwned
  artist__totalUniqueFakeGotchisOwnedArray
  createdAt
  description
  editions
  emitter
  emitter__amountFakeGotchis
  emitter__currentUniqueFakeGotchisOwned
  emitter__currentUniqueFakeGotchisOwnedArray
  emitter__fakeGotchis
  emitter__id
  emitter__totalFakeGotchisOwnedArray
  emitter__totalUniqueFakeGotchisOwned
  emitter__totalUniqueFakeGotchisOwnedArray
  externalLink
  fileHash
  fileType
  flagCount
  id
  likeCount
  minted
  name
  publisher
  publisherName
  publisher__amountFakeGotchis
  publisher__currentUniqueFakeGotchisOwned
  publisher__currentUniqueFakeGotchisOwnedArray
  publisher__fakeGotchis
  publisher__id
  publisher__totalFakeGotchisOwnedArray
  publisher__totalUniqueFakeGotchisOwned
  publisher__totalUniqueFakeGotchisOwnedArray
  royalty
  sender
  sender__amountFakeGotchis
  sender__currentUniqueFakeGotchisOwned
  sender__currentUniqueFakeGotchisOwnedArray
  sender__fakeGotchis
  sender__id
  sender__totalFakeGotchisOwnedArray
  sender__totalUniqueFakeGotchisOwned
  sender__totalUniqueFakeGotchisOwnedArray
  status
  thumbnailHash
  thumbnailType
  timestamp
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Parcel {
  activeListing: BigInt
  alphaBoost: BigInt!
  auctionId: String
  coordinateX: BigInt!
  coordinateY: BigInt!
  district: BigInt!
  fomoBoost: BigInt!
  fudBoost: BigInt!
  historicalPrices: [BigInt!]
  id: ID!
  kekBoost: BigInt!
  owner: User!
  parcelHash: String!
  parcelId: String!
  size: BigInt!
  timesTraded: BigInt!
  tokenId: BigInt!
}

input Parcel_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  activeListing: BigInt
  activeListing_gt: BigInt
  activeListing_gte: BigInt
  activeListing_in: [BigInt!]
  activeListing_lt: BigInt
  activeListing_lte: BigInt
  activeListing_not: BigInt
  activeListing_not_in: [BigInt!]
  alphaBoost: BigInt
  alphaBoost_gt: BigInt
  alphaBoost_gte: BigInt
  alphaBoost_in: [BigInt!]
  alphaBoost_lt: BigInt
  alphaBoost_lte: BigInt
  alphaBoost_not: BigInt
  alphaBoost_not_in: [BigInt!]
  and: [Parcel_filter]
  auctionId: String
  auctionId_contains: String
  auctionId_contains_nocase: String
  auctionId_ends_with: String
  auctionId_ends_with_nocase: String
  auctionId_gt: String
  auctionId_gte: String
  auctionId_in: [String!]
  auctionId_lt: String
  auctionId_lte: String
  auctionId_not: String
  auctionId_not_contains: String
  auctionId_not_contains_nocase: String
  auctionId_not_ends_with: String
  auctionId_not_ends_with_nocase: String
  auctionId_not_in: [String!]
  auctionId_not_starts_with: String
  auctionId_not_starts_with_nocase: String
  auctionId_starts_with: String
  auctionId_starts_with_nocase: String
  coordinateX: BigInt
  coordinateX_gt: BigInt
  coordinateX_gte: BigInt
  coordinateX_in: [BigInt!]
  coordinateX_lt: BigInt
  coordinateX_lte: BigInt
  coordinateX_not: BigInt
  coordinateX_not_in: [BigInt!]
  coordinateY: BigInt
  coordinateY_gt: BigInt
  coordinateY_gte: BigInt
  coordinateY_in: [BigInt!]
  coordinateY_lt: BigInt
  coordinateY_lte: BigInt
  coordinateY_not: BigInt
  coordinateY_not_in: [BigInt!]
  district: BigInt
  district_gt: BigInt
  district_gte: BigInt
  district_in: [BigInt!]
  district_lt: BigInt
  district_lte: BigInt
  district_not: BigInt
  district_not_in: [BigInt!]
  fomoBoost: BigInt
  fomoBoost_gt: BigInt
  fomoBoost_gte: BigInt
  fomoBoost_in: [BigInt!]
  fomoBoost_lt: BigInt
  fomoBoost_lte: BigInt
  fomoBoost_not: BigInt
  fomoBoost_not_in: [BigInt!]
  fudBoost: BigInt
  fudBoost_gt: BigInt
  fudBoost_gte: BigInt
  fudBoost_in: [BigInt!]
  fudBoost_lt: BigInt
  fudBoost_lte: BigInt
  fudBoost_not: BigInt
  fudBoost_not_in: [BigInt!]
  historicalPrices: [BigInt!]
  historicalPrices_contains: [BigInt!]
  historicalPrices_contains_nocase: [BigInt!]
  historicalPrices_not: [BigInt!]
  historicalPrices_not_contains: [BigInt!]
  historicalPrices_not_contains_nocase: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  kekBoost: BigInt
  kekBoost_gt: BigInt
  kekBoost_gte: BigInt
  kekBoost_in: [BigInt!]
  kekBoost_lt: BigInt
  kekBoost_lte: BigInt
  kekBoost_not: BigInt
  kekBoost_not_in: [BigInt!]
  or: [Parcel_filter]
  owner: String
  owner_: User_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  parcelHash: String
  parcelHash_contains: String
  parcelHash_contains_nocase: String
  parcelHash_ends_with: String
  parcelHash_ends_with_nocase: String
  parcelHash_gt: String
  parcelHash_gte: String
  parcelHash_in: [String!]
  parcelHash_lt: String
  parcelHash_lte: String
  parcelHash_not: String
  parcelHash_not_contains: String
  parcelHash_not_contains_nocase: String
  parcelHash_not_ends_with: String
  parcelHash_not_ends_with_nocase: String
  parcelHash_not_in: [String!]
  parcelHash_not_starts_with: String
  parcelHash_not_starts_with_nocase: String
  parcelHash_starts_with: String
  parcelHash_starts_with_nocase: String
  parcelId: String
  parcelId_contains: String
  parcelId_contains_nocase: String
  parcelId_ends_with: String
  parcelId_ends_with_nocase: String
  parcelId_gt: String
  parcelId_gte: String
  parcelId_in: [String!]
  parcelId_lt: String
  parcelId_lte: String
  parcelId_not: String
  parcelId_not_contains: String
  parcelId_not_contains_nocase: String
  parcelId_not_ends_with: String
  parcelId_not_ends_with_nocase: String
  parcelId_not_in: [String!]
  parcelId_not_starts_with: String
  parcelId_not_starts_with_nocase: String
  parcelId_starts_with: String
  parcelId_starts_with_nocase: String
  size: BigInt
  size_gt: BigInt
  size_gte: BigInt
  size_in: [BigInt!]
  size_lt: BigInt
  size_lte: BigInt
  size_not: BigInt
  size_not_in: [BigInt!]
  timesTraded: BigInt
  timesTraded_gt: BigInt
  timesTraded_gte: BigInt
  timesTraded_in: [BigInt!]
  timesTraded_lt: BigInt
  timesTraded_lte: BigInt
  timesTraded_not: BigInt
  timesTraded_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
}

enum Parcel_orderBy {
  activeListing
  alphaBoost
  auctionId
  coordinateX
  coordinateY
  district
  fomoBoost
  fudBoost
  historicalPrices
  id
  kekBoost
  owner
  owner__amountFakeGotchis
  owner__currentUniqueFakeGotchisOwned
  owner__currentUniqueFakeGotchisOwnedArray
  owner__fakeGotchis
  owner__id
  owner__totalFakeGotchisOwnedArray
  owner__totalUniqueFakeGotchisOwned
  owner__totalUniqueFakeGotchisOwnedArray
  parcelHash
  parcelId
  size
  timesTraded
  tokenId
}

type Portal {
  activeListing: BigInt
  boughtAt: BigInt
  buyer: User!
  claimedAt: BigInt
  claimedTime: BigInt
  gotchi: Aavegotchi
  gotchiId: BigInt
  hauntId: BigInt!
  historicalPrices: [BigInt!]
  id: ID!
  openedAt: BigInt
  options(first: Int = 100, orderBy: AavegotchiOption_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: AavegotchiOption_filter): [AavegotchiOption!]!
  owner: User!
  status: PortalStatus!
  timesTraded: BigInt!
}

enum PortalStatus {
  Bought
  Claimed
  Opened
}

input Portal_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  activeListing: BigInt
  activeListing_gt: BigInt
  activeListing_gte: BigInt
  activeListing_in: [BigInt!]
  activeListing_lt: BigInt
  activeListing_lte: BigInt
  activeListing_not: BigInt
  activeListing_not_in: [BigInt!]
  and: [Portal_filter]
  boughtAt: BigInt
  boughtAt_gt: BigInt
  boughtAt_gte: BigInt
  boughtAt_in: [BigInt!]
  boughtAt_lt: BigInt
  boughtAt_lte: BigInt
  boughtAt_not: BigInt
  boughtAt_not_in: [BigInt!]
  buyer: String
  buyer_: User_filter
  buyer_contains: String
  buyer_contains_nocase: String
  buyer_ends_with: String
  buyer_ends_with_nocase: String
  buyer_gt: String
  buyer_gte: String
  buyer_in: [String!]
  buyer_lt: String
  buyer_lte: String
  buyer_not: String
  buyer_not_contains: String
  buyer_not_contains_nocase: String
  buyer_not_ends_with: String
  buyer_not_ends_with_nocase: String
  buyer_not_in: [String!]
  buyer_not_starts_with: String
  buyer_not_starts_with_nocase: String
  buyer_starts_with: String
  buyer_starts_with_nocase: String
  claimedAt: BigInt
  claimedAt_gt: BigInt
  claimedAt_gte: BigInt
  claimedAt_in: [BigInt!]
  claimedAt_lt: BigInt
  claimedAt_lte: BigInt
  claimedAt_not: BigInt
  claimedAt_not_in: [BigInt!]
  claimedTime: BigInt
  claimedTime_gt: BigInt
  claimedTime_gte: BigInt
  claimedTime_in: [BigInt!]
  claimedTime_lt: BigInt
  claimedTime_lte: BigInt
  claimedTime_not: BigInt
  claimedTime_not_in: [BigInt!]
  gotchi: String
  gotchiId: BigInt
  gotchiId_gt: BigInt
  gotchiId_gte: BigInt
  gotchiId_in: [BigInt!]
  gotchiId_lt: BigInt
  gotchiId_lte: BigInt
  gotchiId_not: BigInt
  gotchiId_not_in: [BigInt!]
  gotchi_: Aavegotchi_filter
  gotchi_contains: String
  gotchi_contains_nocase: String
  gotchi_ends_with: String
  gotchi_ends_with_nocase: String
  gotchi_gt: String
  gotchi_gte: String
  gotchi_in: [String!]
  gotchi_lt: String
  gotchi_lte: String
  gotchi_not: String
  gotchi_not_contains: String
  gotchi_not_contains_nocase: String
  gotchi_not_ends_with: String
  gotchi_not_ends_with_nocase: String
  gotchi_not_in: [String!]
  gotchi_not_starts_with: String
  gotchi_not_starts_with_nocase: String
  gotchi_starts_with: String
  gotchi_starts_with_nocase: String
  hauntId: BigInt
  hauntId_gt: BigInt
  hauntId_gte: BigInt
  hauntId_in: [BigInt!]
  hauntId_lt: BigInt
  hauntId_lte: BigInt
  hauntId_not: BigInt
  hauntId_not_in: [BigInt!]
  historicalPrices: [BigInt!]
  historicalPrices_contains: [BigInt!]
  historicalPrices_contains_nocase: [BigInt!]
  historicalPrices_not: [BigInt!]
  historicalPrices_not_contains: [BigInt!]
  historicalPrices_not_contains_nocase: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  openedAt: BigInt
  openedAt_gt: BigInt
  openedAt_gte: BigInt
  openedAt_in: [BigInt!]
  openedAt_lt: BigInt
  openedAt_lte: BigInt
  openedAt_not: BigInt
  openedAt_not_in: [BigInt!]
  options_: AavegotchiOption_filter
  or: [Portal_filter]
  owner: String
  owner_: User_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  status: PortalStatus
  status_in: [PortalStatus!]
  status_not: PortalStatus
  status_not_in: [PortalStatus!]
  timesTraded: BigInt
  timesTraded_gt: BigInt
  timesTraded_gte: BigInt
  timesTraded_in: [BigInt!]
  timesTraded_lt: BigInt
  timesTraded_lte: BigInt
  timesTraded_not: BigInt
  timesTraded_not_in: [BigInt!]
}

enum Portal_orderBy {
  activeListing
  boughtAt
  buyer
  buyer__amountFakeGotchis
  buyer__currentUniqueFakeGotchisOwned
  buyer__currentUniqueFakeGotchisOwnedArray
  buyer__fakeGotchis
  buyer__id
  buyer__totalFakeGotchisOwnedArray
  buyer__totalUniqueFakeGotchisOwned
  buyer__totalUniqueFakeGotchisOwnedArray
  claimedAt
  claimedTime
  gotchi
  gotchiId
  gotchi__activeListing
  gotchi__baseRarityScore
  gotchi__claimedAt
  gotchi__claimedTime
  gotchi__collateral
  gotchi__createdAt
  gotchi__equippedSetID
  gotchi__equippedSetName
  gotchi__escrow
  gotchi__experience
  gotchi__gotchiId
  gotchi__hauntId
  gotchi__id
  gotchi__kinship
  gotchi__lastInteracted
  gotchi__lending
  gotchi__level
  gotchi__locked
  gotchi__minimumStake
  gotchi__modifiedRarityScore
  gotchi__name
  gotchi__nameLowerCase
  gotchi__possibleSets
  gotchi__randomNumber
  gotchi__stakedAmount
  gotchi__status
  gotchi__timesTraded
  gotchi__toNextLevel
  gotchi__usedSkillPoints
  gotchi__withSetsRarityScore
  hauntId
  historicalPrices
  id
  openedAt
  options
  owner
  owner__amountFakeGotchis
  owner__currentUniqueFakeGotchisOwned
  owner__currentUniqueFakeGotchisOwnedArray
  owner__fakeGotchis
  owner__id
  owner__totalFakeGotchisOwnedArray
  owner__totalUniqueFakeGotchisOwned
  owner__totalUniqueFakeGotchisOwnedArray
  status
  timesTraded
}

type Query {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  aavegotchi(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Aavegotchi
  aavegotchiOption(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AavegotchiOption
  aavegotchiOptions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AavegotchiOption_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AavegotchiOption_filter
  ): [AavegotchiOption!]!
  aavegotchis(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Aavegotchi_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Aavegotchi_filter
  ): [Aavegotchi!]!
  claimedToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimedToken
  claimedTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ClaimedToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ClaimedToken_filter
  ): [ClaimedToken!]!
  erc721BuyOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC721BuyOrder
  erc721BuyOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC721BuyOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC721BuyOrder_filter
  ): [ERC721BuyOrder!]!
  erc721Listing(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC721Listing
  erc721Listings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC721Listing_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC721Listing_filter
  ): [ERC721Listing!]!
  erc1155Listing(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1155Listing
  erc1155Listings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1155Listing_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1155Listing_filter
  ): [ERC1155Listing!]!
  erc1155Purchase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1155Purchase
  erc1155Purchases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1155Purchase_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1155Purchase_filter
  ): [ERC1155Purchase!]!
  fakeGotchiCardBalance(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiCardBalance
  fakeGotchiCardBalances(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiCardBalance_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiCardBalance_filter
  ): [FakeGotchiCardBalance!]!
  fakeGotchiHolder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiHolder
  fakeGotchiHolders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiHolder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiHolder_filter
  ): [FakeGotchiHolder!]!
  fakeGotchiNFTToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiNFTToken
  fakeGotchiNFTTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiNFTToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiNFTToken_filter
  ): [FakeGotchiNFTToken!]!
  fakeGotchiNFTTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiNFTTransfer
  fakeGotchiNFTTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiNFTTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiNFTTransfer_filter
  ): [FakeGotchiNFTTransfer!]!
  fakeGotchiStatistic(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiStatistic
  fakeGotchiStatistics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiStatistic_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiStatistic_filter
  ): [FakeGotchiStatistic!]!
  generation(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Generation
  generations(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Generation_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Generation_filter
  ): [Generation!]!
  gotchiLending(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GotchiLending
  gotchiLendings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: GotchiLending_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: GotchiLending_filter
  ): [GotchiLending!]!
  itemType(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ItemType
  itemTypes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ItemType_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ItemType_filter
  ): [ItemType!]!
  metadataActionLog(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetadataActionLog
  metadataActionLogs(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MetadataActionLog_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MetadataActionLog_filter
  ): [MetadataActionLog!]!
  parcel(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Parcel
  parcels(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Parcel_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Parcel_filter
  ): [Parcel!]!
  portal(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Portal
  portals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Portal_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Portal_filter
  ): [Portal!]!
  role(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Role
  roleAssignment(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RoleAssignment
  roleAssignments(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RoleAssignment_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RoleAssignment_filter
  ): [RoleAssignment!]!
  roles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Role_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Role_filter
  ): [Role!]!
  rolesRegistries(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RolesRegistry_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RolesRegistry_filter
  ): [RolesRegistry!]!
  rolesRegistry(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RolesRegistry
  statistic(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Statistic
  statistics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Statistic_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Statistic_filter
  ): [Statistic!]!
  tokenCommitment(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCommitment
  tokenCommitments(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TokenCommitment_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TokenCommitment_filter
  ): [TokenCommitment!]!
  user(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: User_filter
  ): [User!]!
  wearableSet(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WearableSet
  wearableSets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WearableSet_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WearableSet_filter
  ): [WearableSet!]!
  whitelist(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Whitelist
  whitelists(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Whitelist_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Whitelist_filter
  ): [Whitelist!]!
}

type Role {
  id: ID!
  roleAssignments(first: Int = 100, orderBy: RoleAssignment_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RoleAssignment_filter): [RoleAssignment!]
  roleHash: Bytes!
  rolesRegistry: RolesRegistry!
  tokenAddress: String!
  tokenCommitment: TokenCommitment
  tokenId: BigInt!
}

type RoleAssignment {
  createdAt: BigInt!
  data: Bytes!
  expirationDate: BigInt!
  grantee: User!
  grantor: User!
  id: ID!
  revocable: Boolean!
  role: Role!
  tokenAddress: String!
  tokenCommitment: TokenCommitment
  tokenId: BigInt!
  updatedAt: BigInt!
}

input RoleAssignment_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RoleAssignment_filter]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  data: Bytes
  data_contains: Bytes
  data_gt: Bytes
  data_gte: Bytes
  data_in: [Bytes!]
  data_lt: Bytes
  data_lte: Bytes
  data_not: Bytes
  data_not_contains: Bytes
  data_not_in: [Bytes!]
  expirationDate: BigInt
  expirationDate_gt: BigInt
  expirationDate_gte: BigInt
  expirationDate_in: [BigInt!]
  expirationDate_lt: BigInt
  expirationDate_lte: BigInt
  expirationDate_not: BigInt
  expirationDate_not_in: [BigInt!]
  grantee: String
  grantee_: User_filter
  grantee_contains: String
  grantee_contains_nocase: String
  grantee_ends_with: String
  grantee_ends_with_nocase: String
  grantee_gt: String
  grantee_gte: String
  grantee_in: [String!]
  grantee_lt: String
  grantee_lte: String
  grantee_not: String
  grantee_not_contains: String
  grantee_not_contains_nocase: String
  grantee_not_ends_with: String
  grantee_not_ends_with_nocase: String
  grantee_not_in: [String!]
  grantee_not_starts_with: String
  grantee_not_starts_with_nocase: String
  grantee_starts_with: String
  grantee_starts_with_nocase: String
  grantor: String
  grantor_: User_filter
  grantor_contains: String
  grantor_contains_nocase: String
  grantor_ends_with: String
  grantor_ends_with_nocase: String
  grantor_gt: String
  grantor_gte: String
  grantor_in: [String!]
  grantor_lt: String
  grantor_lte: String
  grantor_not: String
  grantor_not_contains: String
  grantor_not_contains_nocase: String
  grantor_not_ends_with: String
  grantor_not_ends_with_nocase: String
  grantor_not_in: [String!]
  grantor_not_starts_with: String
  grantor_not_starts_with_nocase: String
  grantor_starts_with: String
  grantor_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [RoleAssignment_filter]
  revocable: Boolean
  revocable_in: [Boolean!]
  revocable_not: Boolean
  revocable_not_in: [Boolean!]
  role: String
  role_: Role_filter
  role_contains: String
  role_contains_nocase: String
  role_ends_with: String
  role_ends_with_nocase: String
  role_gt: String
  role_gte: String
  role_in: [String!]
  role_lt: String
  role_lte: String
  role_not: String
  role_not_contains: String
  role_not_contains_nocase: String
  role_not_ends_with: String
  role_not_ends_with_nocase: String
  role_not_in: [String!]
  role_not_starts_with: String
  role_not_starts_with_nocase: String
  role_starts_with: String
  role_starts_with_nocase: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenCommitment: String
  tokenCommitment_: TokenCommitment_filter
  tokenCommitment_contains: String
  tokenCommitment_contains_nocase: String
  tokenCommitment_ends_with: String
  tokenCommitment_ends_with_nocase: String
  tokenCommitment_gt: String
  tokenCommitment_gte: String
  tokenCommitment_in: [String!]
  tokenCommitment_lt: String
  tokenCommitment_lte: String
  tokenCommitment_not: String
  tokenCommitment_not_contains: String
  tokenCommitment_not_contains_nocase: String
  tokenCommitment_not_ends_with: String
  tokenCommitment_not_ends_with_nocase: String
  tokenCommitment_not_in: [String!]
  tokenCommitment_not_starts_with: String
  tokenCommitment_not_starts_with_nocase: String
  tokenCommitment_starts_with: String
  tokenCommitment_starts_with_nocase: String
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum RoleAssignment_orderBy {
  createdAt
  data
  expirationDate
  grantee
  grantee__amountFakeGotchis
  grantee__currentUniqueFakeGotchisOwned
  grantee__currentUniqueFakeGotchisOwnedArray
  grantee__fakeGotchis
  grantee__id
  grantee__totalFakeGotchisOwnedArray
  grantee__totalUniqueFakeGotchisOwned
  grantee__totalUniqueFakeGotchisOwnedArray
  grantor
  grantor__amountFakeGotchis
  grantor__currentUniqueFakeGotchisOwned
  grantor__currentUniqueFakeGotchisOwnedArray
  grantor__fakeGotchis
  grantor__id
  grantor__totalFakeGotchisOwnedArray
  grantor__totalUniqueFakeGotchisOwned
  grantor__totalUniqueFakeGotchisOwnedArray
  id
  revocable
  role
  role__id
  role__roleHash
  role__tokenAddress
  role__tokenId
  tokenAddress
  tokenCommitment
  tokenCommitment__amount
  tokenCommitment__depositId
  tokenCommitment__id
  tokenCommitment__isReleased
  tokenCommitment__tokenAddress
  tokenCommitment__tokenId
  tokenCommitment__usedBalance
  tokenId
  updatedAt
}

input Role_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Role_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Role_filter]
  roleAssignments_: RoleAssignment_filter
  roleHash: Bytes
  roleHash_contains: Bytes
  roleHash_gt: Bytes
  roleHash_gte: Bytes
  roleHash_in: [Bytes!]
  roleHash_lt: Bytes
  roleHash_lte: Bytes
  roleHash_not: Bytes
  roleHash_not_contains: Bytes
  roleHash_not_in: [Bytes!]
  rolesRegistry: String
  rolesRegistry_: RolesRegistry_filter
  rolesRegistry_contains: String
  rolesRegistry_contains_nocase: String
  rolesRegistry_ends_with: String
  rolesRegistry_ends_with_nocase: String
  rolesRegistry_gt: String
  rolesRegistry_gte: String
  rolesRegistry_in: [String!]
  rolesRegistry_lt: String
  rolesRegistry_lte: String
  rolesRegistry_not: String
  rolesRegistry_not_contains: String
  rolesRegistry_not_contains_nocase: String
  rolesRegistry_not_ends_with: String
  rolesRegistry_not_ends_with_nocase: String
  rolesRegistry_not_in: [String!]
  rolesRegistry_not_starts_with: String
  rolesRegistry_not_starts_with_nocase: String
  rolesRegistry_starts_with: String
  rolesRegistry_starts_with_nocase: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenCommitment: String
  tokenCommitment_: TokenCommitment_filter
  tokenCommitment_contains: String
  tokenCommitment_contains_nocase: String
  tokenCommitment_ends_with: String
  tokenCommitment_ends_with_nocase: String
  tokenCommitment_gt: String
  tokenCommitment_gte: String
  tokenCommitment_in: [String!]
  tokenCommitment_lt: String
  tokenCommitment_lte: String
  tokenCommitment_not: String
  tokenCommitment_not_contains: String
  tokenCommitment_not_contains_nocase: String
  tokenCommitment_not_ends_with: String
  tokenCommitment_not_ends_with_nocase: String
  tokenCommitment_not_in: [String!]
  tokenCommitment_not_starts_with: String
  tokenCommitment_not_starts_with_nocase: String
  tokenCommitment_starts_with: String
  tokenCommitment_starts_with_nocase: String
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
}

enum Role_orderBy {
  id
  roleAssignments
  roleHash
  rolesRegistry
  rolesRegistry__id
  tokenAddress
  tokenCommitment
  tokenCommitment__amount
  tokenCommitment__depositId
  tokenCommitment__id
  tokenCommitment__isReleased
  tokenCommitment__tokenAddress
  tokenCommitment__tokenId
  tokenCommitment__usedBalance
  tokenId
}

type RolesRegistry {
  id: ID!
  roles(first: Int = 100, orderBy: Role_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Role_filter): [Role!]
}

input RolesRegistry_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RolesRegistry_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [RolesRegistry_filter]
  roles_: Role_filter
}

enum RolesRegistry_orderBy {
  id
  roles
}

type Statistic {
  """Total amount of Aavegotchis borrowed"""
  aavegotchisBorrowed: BigInt!

  """Total amount of Aavegotchis claimed"""
  aavegotchisClaimed: BigInt!

  """Total amount of Aavegotchis sacrificed"""
  aavegotchisSacrificed: BigInt!
  burnedCards: Int
  burnedNFTs: Int
  erc721ActiveListingCount: BigInt!
  erc721TotalVolume: BigInt!
  erc1155ActiveListingCount: BigInt!
  erc1155TotalVolume: BigInt!

  """There will be a single Statistic entity with id = '0'"""
  id: ID!

  """Total amount of portals that have been bought."""
  portalsBought: BigInt!

  """Total amount of portals that have been opened"""
  portalsOpened: BigInt!
  tokenIdCounter: Int
  totalConsumablesVolume: BigInt!
  totalEditionsCirculating: Int!
  totalEditionsCirculatingArray: String!
  totalEditionsMinted: Int!
  totalFakeGotchiOwners: Int
  totalFakeGotchiOwnersArray: [Bytes!]!
  totalFakeGotchiPieces: Int
  totalNFTs: Int
  totalNFTsArray: String!
  totalTicketsVolume: BigInt!
  totalWearablesVolume: BigInt!
}

input Statistic_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  aavegotchisBorrowed: BigInt
  aavegotchisBorrowed_gt: BigInt
  aavegotchisBorrowed_gte: BigInt
  aavegotchisBorrowed_in: [BigInt!]
  aavegotchisBorrowed_lt: BigInt
  aavegotchisBorrowed_lte: BigInt
  aavegotchisBorrowed_not: BigInt
  aavegotchisBorrowed_not_in: [BigInt!]
  aavegotchisClaimed: BigInt
  aavegotchisClaimed_gt: BigInt
  aavegotchisClaimed_gte: BigInt
  aavegotchisClaimed_in: [BigInt!]
  aavegotchisClaimed_lt: BigInt
  aavegotchisClaimed_lte: BigInt
  aavegotchisClaimed_not: BigInt
  aavegotchisClaimed_not_in: [BigInt!]
  aavegotchisSacrificed: BigInt
  aavegotchisSacrificed_gt: BigInt
  aavegotchisSacrificed_gte: BigInt
  aavegotchisSacrificed_in: [BigInt!]
  aavegotchisSacrificed_lt: BigInt
  aavegotchisSacrificed_lte: BigInt
  aavegotchisSacrificed_not: BigInt
  aavegotchisSacrificed_not_in: [BigInt!]
  and: [Statistic_filter]
  burnedCards: Int
  burnedCards_gt: Int
  burnedCards_gte: Int
  burnedCards_in: [Int!]
  burnedCards_lt: Int
  burnedCards_lte: Int
  burnedCards_not: Int
  burnedCards_not_in: [Int!]
  burnedNFTs: Int
  burnedNFTs_gt: Int
  burnedNFTs_gte: Int
  burnedNFTs_in: [Int!]
  burnedNFTs_lt: Int
  burnedNFTs_lte: Int
  burnedNFTs_not: Int
  burnedNFTs_not_in: [Int!]
  erc721ActiveListingCount: BigInt
  erc721ActiveListingCount_gt: BigInt
  erc721ActiveListingCount_gte: BigInt
  erc721ActiveListingCount_in: [BigInt!]
  erc721ActiveListingCount_lt: BigInt
  erc721ActiveListingCount_lte: BigInt
  erc721ActiveListingCount_not: BigInt
  erc721ActiveListingCount_not_in: [BigInt!]
  erc721TotalVolume: BigInt
  erc721TotalVolume_gt: BigInt
  erc721TotalVolume_gte: BigInt
  erc721TotalVolume_in: [BigInt!]
  erc721TotalVolume_lt: BigInt
  erc721TotalVolume_lte: BigInt
  erc721TotalVolume_not: BigInt
  erc721TotalVolume_not_in: [BigInt!]
  erc1155ActiveListingCount: BigInt
  erc1155ActiveListingCount_gt: BigInt
  erc1155ActiveListingCount_gte: BigInt
  erc1155ActiveListingCount_in: [BigInt!]
  erc1155ActiveListingCount_lt: BigInt
  erc1155ActiveListingCount_lte: BigInt
  erc1155ActiveListingCount_not: BigInt
  erc1155ActiveListingCount_not_in: [BigInt!]
  erc1155TotalVolume: BigInt
  erc1155TotalVolume_gt: BigInt
  erc1155TotalVolume_gte: BigInt
  erc1155TotalVolume_in: [BigInt!]
  erc1155TotalVolume_lt: BigInt
  erc1155TotalVolume_lte: BigInt
  erc1155TotalVolume_not: BigInt
  erc1155TotalVolume_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Statistic_filter]
  portalsBought: BigInt
  portalsBought_gt: BigInt
  portalsBought_gte: BigInt
  portalsBought_in: [BigInt!]
  portalsBought_lt: BigInt
  portalsBought_lte: BigInt
  portalsBought_not: BigInt
  portalsBought_not_in: [BigInt!]
  portalsOpened: BigInt
  portalsOpened_gt: BigInt
  portalsOpened_gte: BigInt
  portalsOpened_in: [BigInt!]
  portalsOpened_lt: BigInt
  portalsOpened_lte: BigInt
  portalsOpened_not: BigInt
  portalsOpened_not_in: [BigInt!]
  tokenIdCounter: Int
  tokenIdCounter_gt: Int
  tokenIdCounter_gte: Int
  tokenIdCounter_in: [Int!]
  tokenIdCounter_lt: Int
  tokenIdCounter_lte: Int
  tokenIdCounter_not: Int
  tokenIdCounter_not_in: [Int!]
  totalConsumablesVolume: BigInt
  totalConsumablesVolume_gt: BigInt
  totalConsumablesVolume_gte: BigInt
  totalConsumablesVolume_in: [BigInt!]
  totalConsumablesVolume_lt: BigInt
  totalConsumablesVolume_lte: BigInt
  totalConsumablesVolume_not: BigInt
  totalConsumablesVolume_not_in: [BigInt!]
  totalEditionsCirculating: Int
  totalEditionsCirculatingArray: String
  totalEditionsCirculatingArray_contains: String
  totalEditionsCirculatingArray_contains_nocase: String
  totalEditionsCirculatingArray_ends_with: String
  totalEditionsCirculatingArray_ends_with_nocase: String
  totalEditionsCirculatingArray_gt: String
  totalEditionsCirculatingArray_gte: String
  totalEditionsCirculatingArray_in: [String!]
  totalEditionsCirculatingArray_lt: String
  totalEditionsCirculatingArray_lte: String
  totalEditionsCirculatingArray_not: String
  totalEditionsCirculatingArray_not_contains: String
  totalEditionsCirculatingArray_not_contains_nocase: String
  totalEditionsCirculatingArray_not_ends_with: String
  totalEditionsCirculatingArray_not_ends_with_nocase: String
  totalEditionsCirculatingArray_not_in: [String!]
  totalEditionsCirculatingArray_not_starts_with: String
  totalEditionsCirculatingArray_not_starts_with_nocase: String
  totalEditionsCirculatingArray_starts_with: String
  totalEditionsCirculatingArray_starts_with_nocase: String
  totalEditionsCirculating_gt: Int
  totalEditionsCirculating_gte: Int
  totalEditionsCirculating_in: [Int!]
  totalEditionsCirculating_lt: Int
  totalEditionsCirculating_lte: Int
  totalEditionsCirculating_not: Int
  totalEditionsCirculating_not_in: [Int!]
  totalEditionsMinted: Int
  totalEditionsMinted_gt: Int
  totalEditionsMinted_gte: Int
  totalEditionsMinted_in: [Int!]
  totalEditionsMinted_lt: Int
  totalEditionsMinted_lte: Int
  totalEditionsMinted_not: Int
  totalEditionsMinted_not_in: [Int!]
  totalFakeGotchiOwners: Int
  totalFakeGotchiOwnersArray: [Bytes!]
  totalFakeGotchiOwnersArray_contains: [Bytes!]
  totalFakeGotchiOwnersArray_contains_nocase: [Bytes!]
  totalFakeGotchiOwnersArray_not: [Bytes!]
  totalFakeGotchiOwnersArray_not_contains: [Bytes!]
  totalFakeGotchiOwnersArray_not_contains_nocase: [Bytes!]
  totalFakeGotchiOwners_gt: Int
  totalFakeGotchiOwners_gte: Int
  totalFakeGotchiOwners_in: [Int!]
  totalFakeGotchiOwners_lt: Int
  totalFakeGotchiOwners_lte: Int
  totalFakeGotchiOwners_not: Int
  totalFakeGotchiOwners_not_in: [Int!]
  totalFakeGotchiPieces: Int
  totalFakeGotchiPieces_gt: Int
  totalFakeGotchiPieces_gte: Int
  totalFakeGotchiPieces_in: [Int!]
  totalFakeGotchiPieces_lt: Int
  totalFakeGotchiPieces_lte: Int
  totalFakeGotchiPieces_not: Int
  totalFakeGotchiPieces_not_in: [Int!]
  totalNFTs: Int
  totalNFTsArray: String
  totalNFTsArray_contains: String
  totalNFTsArray_contains_nocase: String
  totalNFTsArray_ends_with: String
  totalNFTsArray_ends_with_nocase: String
  totalNFTsArray_gt: String
  totalNFTsArray_gte: String
  totalNFTsArray_in: [String!]
  totalNFTsArray_lt: String
  totalNFTsArray_lte: String
  totalNFTsArray_not: String
  totalNFTsArray_not_contains: String
  totalNFTsArray_not_contains_nocase: String
  totalNFTsArray_not_ends_with: String
  totalNFTsArray_not_ends_with_nocase: String
  totalNFTsArray_not_in: [String!]
  totalNFTsArray_not_starts_with: String
  totalNFTsArray_not_starts_with_nocase: String
  totalNFTsArray_starts_with: String
  totalNFTsArray_starts_with_nocase: String
  totalNFTs_gt: Int
  totalNFTs_gte: Int
  totalNFTs_in: [Int!]
  totalNFTs_lt: Int
  totalNFTs_lte: Int
  totalNFTs_not: Int
  totalNFTs_not_in: [Int!]
  totalTicketsVolume: BigInt
  totalTicketsVolume_gt: BigInt
  totalTicketsVolume_gte: BigInt
  totalTicketsVolume_in: [BigInt!]
  totalTicketsVolume_lt: BigInt
  totalTicketsVolume_lte: BigInt
  totalTicketsVolume_not: BigInt
  totalTicketsVolume_not_in: [BigInt!]
  totalWearablesVolume: BigInt
  totalWearablesVolume_gt: BigInt
  totalWearablesVolume_gte: BigInt
  totalWearablesVolume_in: [BigInt!]
  totalWearablesVolume_lt: BigInt
  totalWearablesVolume_lte: BigInt
  totalWearablesVolume_not: BigInt
  totalWearablesVolume_not_in: [BigInt!]
}

enum Statistic_orderBy {
  aavegotchisBorrowed
  aavegotchisClaimed
  aavegotchisSacrificed
  burnedCards
  burnedNFTs
  erc721ActiveListingCount
  erc721TotalVolume
  erc1155ActiveListingCount
  erc1155TotalVolume
  id
  portalsBought
  portalsOpened
  tokenIdCounter
  totalConsumablesVolume
  totalEditionsCirculating
  totalEditionsCirculatingArray
  totalEditionsMinted
  totalFakeGotchiOwners
  totalFakeGotchiOwnersArray
  totalFakeGotchiPieces
  totalNFTs
  totalNFTsArray
  totalTicketsVolume
  totalWearablesVolume
}

type Subscription {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  aavegotchi(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Aavegotchi
  aavegotchiOption(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AavegotchiOption
  aavegotchiOptions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AavegotchiOption_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AavegotchiOption_filter
  ): [AavegotchiOption!]!
  aavegotchis(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Aavegotchi_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Aavegotchi_filter
  ): [Aavegotchi!]!
  claimedToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimedToken
  claimedTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ClaimedToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ClaimedToken_filter
  ): [ClaimedToken!]!
  erc721BuyOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC721BuyOrder
  erc721BuyOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC721BuyOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC721BuyOrder_filter
  ): [ERC721BuyOrder!]!
  erc721Listing(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC721Listing
  erc721Listings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC721Listing_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC721Listing_filter
  ): [ERC721Listing!]!
  erc1155Listing(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1155Listing
  erc1155Listings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1155Listing_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1155Listing_filter
  ): [ERC1155Listing!]!
  erc1155Purchase(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1155Purchase
  erc1155Purchases(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1155Purchase_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1155Purchase_filter
  ): [ERC1155Purchase!]!
  fakeGotchiCardBalance(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiCardBalance
  fakeGotchiCardBalances(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiCardBalance_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiCardBalance_filter
  ): [FakeGotchiCardBalance!]!
  fakeGotchiHolder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiHolder
  fakeGotchiHolders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiHolder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiHolder_filter
  ): [FakeGotchiHolder!]!
  fakeGotchiNFTToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiNFTToken
  fakeGotchiNFTTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiNFTToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiNFTToken_filter
  ): [FakeGotchiNFTToken!]!
  fakeGotchiNFTTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiNFTTransfer
  fakeGotchiNFTTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiNFTTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiNFTTransfer_filter
  ): [FakeGotchiNFTTransfer!]!
  fakeGotchiStatistic(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FakeGotchiStatistic
  fakeGotchiStatistics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FakeGotchiStatistic_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FakeGotchiStatistic_filter
  ): [FakeGotchiStatistic!]!
  generation(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Generation
  generations(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Generation_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Generation_filter
  ): [Generation!]!
  gotchiLending(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GotchiLending
  gotchiLendings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: GotchiLending_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: GotchiLending_filter
  ): [GotchiLending!]!
  itemType(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ItemType
  itemTypes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ItemType_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ItemType_filter
  ): [ItemType!]!
  metadataActionLog(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetadataActionLog
  metadataActionLogs(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MetadataActionLog_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MetadataActionLog_filter
  ): [MetadataActionLog!]!
  parcel(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Parcel
  parcels(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Parcel_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Parcel_filter
  ): [Parcel!]!
  portal(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Portal
  portals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Portal_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Portal_filter
  ): [Portal!]!
  role(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Role
  roleAssignment(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RoleAssignment
  roleAssignments(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RoleAssignment_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RoleAssignment_filter
  ): [RoleAssignment!]!
  roles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Role_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Role_filter
  ): [Role!]!
  rolesRegistries(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RolesRegistry_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RolesRegistry_filter
  ): [RolesRegistry!]!
  rolesRegistry(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RolesRegistry
  statistic(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Statistic
  statistics(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Statistic_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Statistic_filter
  ): [Statistic!]!
  tokenCommitment(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCommitment
  tokenCommitments(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TokenCommitment_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TokenCommitment_filter
  ): [TokenCommitment!]!
  user(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: User_filter
  ): [User!]!
  wearableSet(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WearableSet
  wearableSets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WearableSet_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WearableSet_filter
  ): [WearableSet!]!
  whitelist(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Whitelist
  whitelists(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Whitelist_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Whitelist_filter
  ): [Whitelist!]!
}

"A string representation of microseconds UNIX timestamp (16 digits)\n"
scalar Timestamp

type TokenCommitment {
  amount: BigInt!
  depositId: BigInt!
  grantor: User!
  id: ID!
  isReleased: Boolean!
  roleAssignments(first: Int = 100, orderBy: RoleAssignment_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RoleAssignment_filter): [RoleAssignment!]
  rolesRegistry: RolesRegistry!
  tokenAddress: String!
  tokenId: BigInt!
  usedBalance: BigInt!
}

input TokenCommitment_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [TokenCommitment_filter]
  depositId: BigInt
  depositId_gt: BigInt
  depositId_gte: BigInt
  depositId_in: [BigInt!]
  depositId_lt: BigInt
  depositId_lte: BigInt
  depositId_not: BigInt
  depositId_not_in: [BigInt!]
  grantor: String
  grantor_: User_filter
  grantor_contains: String
  grantor_contains_nocase: String
  grantor_ends_with: String
  grantor_ends_with_nocase: String
  grantor_gt: String
  grantor_gte: String
  grantor_in: [String!]
  grantor_lt: String
  grantor_lte: String
  grantor_not: String
  grantor_not_contains: String
  grantor_not_contains_nocase: String
  grantor_not_ends_with: String
  grantor_not_ends_with_nocase: String
  grantor_not_in: [String!]
  grantor_not_starts_with: String
  grantor_not_starts_with_nocase: String
  grantor_starts_with: String
  grantor_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isReleased: Boolean
  isReleased_in: [Boolean!]
  isReleased_not: Boolean
  isReleased_not_in: [Boolean!]
  or: [TokenCommitment_filter]
  roleAssignments_: RoleAssignment_filter
  rolesRegistry: String
  rolesRegistry_: RolesRegistry_filter
  rolesRegistry_contains: String
  rolesRegistry_contains_nocase: String
  rolesRegistry_ends_with: String
  rolesRegistry_ends_with_nocase: String
  rolesRegistry_gt: String
  rolesRegistry_gte: String
  rolesRegistry_in: [String!]
  rolesRegistry_lt: String
  rolesRegistry_lte: String
  rolesRegistry_not: String
  rolesRegistry_not_contains: String
  rolesRegistry_not_contains_nocase: String
  rolesRegistry_not_ends_with: String
  rolesRegistry_not_ends_with_nocase: String
  rolesRegistry_not_in: [String!]
  rolesRegistry_not_starts_with: String
  rolesRegistry_not_starts_with_nocase: String
  rolesRegistry_starts_with: String
  rolesRegistry_starts_with_nocase: String
  tokenAddress: String
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_gt: String
  tokenAddress_gte: String
  tokenAddress_in: [String!]
  tokenAddress_lt: String
  tokenAddress_lte: String
  tokenAddress_not: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  tokenAddress_not_in: [String!]
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
  usedBalance: BigInt
  usedBalance_gt: BigInt
  usedBalance_gte: BigInt
  usedBalance_in: [BigInt!]
  usedBalance_lt: BigInt
  usedBalance_lte: BigInt
  usedBalance_not: BigInt
  usedBalance_not_in: [BigInt!]
}

enum TokenCommitment_orderBy {
  amount
  depositId
  grantor
  grantor__amountFakeGotchis
  grantor__currentUniqueFakeGotchisOwned
  grantor__currentUniqueFakeGotchisOwnedArray
  grantor__fakeGotchis
  grantor__id
  grantor__totalFakeGotchisOwnedArray
  grantor__totalUniqueFakeGotchisOwned
  grantor__totalUniqueFakeGotchisOwnedArray
  id
  isReleased
  roleAssignments
  rolesRegistry
  rolesRegistry__id
  tokenAddress
  tokenId
  usedBalance
}

type User {
  amountFakeGotchis: Int!
  currentUniqueFakeGotchisOwned: Int!
  currentUniqueFakeGotchisOwnedArray: String!
  fakeGotchiCardBalances(first: Int = 100, orderBy: FakeGotchiCardBalance_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FakeGotchiCardBalance_filter): [FakeGotchiCardBalance!]!
  fakeGotchiNFTTokens(first: Int = 100, orderBy: FakeGotchiNFTToken_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FakeGotchiNFTToken_filter): [FakeGotchiNFTToken!]!
  fakeGotchis: String!
  gotchisBorrowed: [BigInt!]!
  gotchisLentOut: [BigInt!]!
  gotchisOriginalOwned(first: Int = 100, orderBy: Aavegotchi_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Aavegotchi_filter): [Aavegotchi!]!
  gotchisOwned(first: Int = 100, orderBy: Aavegotchi_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Aavegotchi_filter): [Aavegotchi!]!
  id: ID!
  parcelsOwned(first: Int = 100, orderBy: Parcel_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Parcel_filter): [Parcel!]!
  portalsBought(first: Int = 100, orderBy: Portal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Portal_filter): [Portal!]!
  portalsOwned(first: Int = 100, orderBy: Portal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Portal_filter): [Portal!]!
  totalFakeGotchisOwnedArray: String!
  totalUniqueFakeGotchisOwned: Int!
  totalUniqueFakeGotchisOwnedArray: String!
}

input User_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amountFakeGotchis: Int
  amountFakeGotchis_gt: Int
  amountFakeGotchis_gte: Int
  amountFakeGotchis_in: [Int!]
  amountFakeGotchis_lt: Int
  amountFakeGotchis_lte: Int
  amountFakeGotchis_not: Int
  amountFakeGotchis_not_in: [Int!]
  and: [User_filter]
  currentUniqueFakeGotchisOwned: Int
  currentUniqueFakeGotchisOwnedArray: String
  currentUniqueFakeGotchisOwnedArray_contains: String
  currentUniqueFakeGotchisOwnedArray_contains_nocase: String
  currentUniqueFakeGotchisOwnedArray_ends_with: String
  currentUniqueFakeGotchisOwnedArray_ends_with_nocase: String
  currentUniqueFakeGotchisOwnedArray_gt: String
  currentUniqueFakeGotchisOwnedArray_gte: String
  currentUniqueFakeGotchisOwnedArray_in: [String!]
  currentUniqueFakeGotchisOwnedArray_lt: String
  currentUniqueFakeGotchisOwnedArray_lte: String
  currentUniqueFakeGotchisOwnedArray_not: String
  currentUniqueFakeGotchisOwnedArray_not_contains: String
  currentUniqueFakeGotchisOwnedArray_not_contains_nocase: String
  currentUniqueFakeGotchisOwnedArray_not_ends_with: String
  currentUniqueFakeGotchisOwnedArray_not_ends_with_nocase: String
  currentUniqueFakeGotchisOwnedArray_not_in: [String!]
  currentUniqueFakeGotchisOwnedArray_not_starts_with: String
  currentUniqueFakeGotchisOwnedArray_not_starts_with_nocase: String
  currentUniqueFakeGotchisOwnedArray_starts_with: String
  currentUniqueFakeGotchisOwnedArray_starts_with_nocase: String
  currentUniqueFakeGotchisOwned_gt: Int
  currentUniqueFakeGotchisOwned_gte: Int
  currentUniqueFakeGotchisOwned_in: [Int!]
  currentUniqueFakeGotchisOwned_lt: Int
  currentUniqueFakeGotchisOwned_lte: Int
  currentUniqueFakeGotchisOwned_not: Int
  currentUniqueFakeGotchisOwned_not_in: [Int!]
  fakeGotchiCardBalances_: FakeGotchiCardBalance_filter
  fakeGotchiNFTTokens_: FakeGotchiNFTToken_filter
  fakeGotchis: String
  fakeGotchis_contains: String
  fakeGotchis_contains_nocase: String
  fakeGotchis_ends_with: String
  fakeGotchis_ends_with_nocase: String
  fakeGotchis_gt: String
  fakeGotchis_gte: String
  fakeGotchis_in: [String!]
  fakeGotchis_lt: String
  fakeGotchis_lte: String
  fakeGotchis_not: String
  fakeGotchis_not_contains: String
  fakeGotchis_not_contains_nocase: String
  fakeGotchis_not_ends_with: String
  fakeGotchis_not_ends_with_nocase: String
  fakeGotchis_not_in: [String!]
  fakeGotchis_not_starts_with: String
  fakeGotchis_not_starts_with_nocase: String
  fakeGotchis_starts_with: String
  fakeGotchis_starts_with_nocase: String
  gotchisBorrowed: [BigInt!]
  gotchisBorrowed_contains: [BigInt!]
  gotchisBorrowed_contains_nocase: [BigInt!]
  gotchisBorrowed_not: [BigInt!]
  gotchisBorrowed_not_contains: [BigInt!]
  gotchisBorrowed_not_contains_nocase: [BigInt!]
  gotchisLentOut: [BigInt!]
  gotchisLentOut_contains: [BigInt!]
  gotchisLentOut_contains_nocase: [BigInt!]
  gotchisLentOut_not: [BigInt!]
  gotchisLentOut_not_contains: [BigInt!]
  gotchisLentOut_not_contains_nocase: [BigInt!]
  gotchisOriginalOwned_: Aavegotchi_filter
  gotchisOwned_: Aavegotchi_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [User_filter]
  parcelsOwned_: Parcel_filter
  portalsBought_: Portal_filter
  portalsOwned_: Portal_filter
  totalFakeGotchisOwnedArray: String
  totalFakeGotchisOwnedArray_contains: String
  totalFakeGotchisOwnedArray_contains_nocase: String
  totalFakeGotchisOwnedArray_ends_with: String
  totalFakeGotchisOwnedArray_ends_with_nocase: String
  totalFakeGotchisOwnedArray_gt: String
  totalFakeGotchisOwnedArray_gte: String
  totalFakeGotchisOwnedArray_in: [String!]
  totalFakeGotchisOwnedArray_lt: String
  totalFakeGotchisOwnedArray_lte: String
  totalFakeGotchisOwnedArray_not: String
  totalFakeGotchisOwnedArray_not_contains: String
  totalFakeGotchisOwnedArray_not_contains_nocase: String
  totalFakeGotchisOwnedArray_not_ends_with: String
  totalFakeGotchisOwnedArray_not_ends_with_nocase: String
  totalFakeGotchisOwnedArray_not_in: [String!]
  totalFakeGotchisOwnedArray_not_starts_with: String
  totalFakeGotchisOwnedArray_not_starts_with_nocase: String
  totalFakeGotchisOwnedArray_starts_with: String
  totalFakeGotchisOwnedArray_starts_with_nocase: String
  totalUniqueFakeGotchisOwned: Int
  totalUniqueFakeGotchisOwnedArray: String
  totalUniqueFakeGotchisOwnedArray_contains: String
  totalUniqueFakeGotchisOwnedArray_contains_nocase: String
  totalUniqueFakeGotchisOwnedArray_ends_with: String
  totalUniqueFakeGotchisOwnedArray_ends_with_nocase: String
  totalUniqueFakeGotchisOwnedArray_gt: String
  totalUniqueFakeGotchisOwnedArray_gte: String
  totalUniqueFakeGotchisOwnedArray_in: [String!]
  totalUniqueFakeGotchisOwnedArray_lt: String
  totalUniqueFakeGotchisOwnedArray_lte: String
  totalUniqueFakeGotchisOwnedArray_not: String
  totalUniqueFakeGotchisOwnedArray_not_contains: String
  totalUniqueFakeGotchisOwnedArray_not_contains_nocase: String
  totalUniqueFakeGotchisOwnedArray_not_ends_with: String
  totalUniqueFakeGotchisOwnedArray_not_ends_with_nocase: String
  totalUniqueFakeGotchisOwnedArray_not_in: [String!]
  totalUniqueFakeGotchisOwnedArray_not_starts_with: String
  totalUniqueFakeGotchisOwnedArray_not_starts_with_nocase: String
  totalUniqueFakeGotchisOwnedArray_starts_with: String
  totalUniqueFakeGotchisOwnedArray_starts_with_nocase: String
  totalUniqueFakeGotchisOwned_gt: Int
  totalUniqueFakeGotchisOwned_gte: Int
  totalUniqueFakeGotchisOwned_in: [Int!]
  totalUniqueFakeGotchisOwned_lt: Int
  totalUniqueFakeGotchisOwned_lte: Int
  totalUniqueFakeGotchisOwned_not: Int
  totalUniqueFakeGotchisOwned_not_in: [Int!]
}

enum User_orderBy {
  amountFakeGotchis
  currentUniqueFakeGotchisOwned
  currentUniqueFakeGotchisOwnedArray
  fakeGotchiCardBalances
  fakeGotchiNFTTokens
  fakeGotchis
  gotchisBorrowed
  gotchisLentOut
  gotchisOriginalOwned
  gotchisOwned
  id
  parcelsOwned
  portalsBought
  portalsOwned
  totalFakeGotchisOwnedArray
  totalUniqueFakeGotchisOwned
  totalUniqueFakeGotchisOwnedArray
}

type WearableSet {
  allowedCollaterals: [Int!]
  id: ID!
  name: String!
  traitBonuses: [Int!]
  wearableIds: [Int!]
}

input WearableSet_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  allowedCollaterals: [Int!]
  allowedCollaterals_contains: [Int!]
  allowedCollaterals_contains_nocase: [Int!]
  allowedCollaterals_not: [Int!]
  allowedCollaterals_not_contains: [Int!]
  allowedCollaterals_not_contains_nocase: [Int!]
  and: [WearableSet_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [WearableSet_filter]
  traitBonuses: [Int!]
  traitBonuses_contains: [Int!]
  traitBonuses_contains_nocase: [Int!]
  traitBonuses_not: [Int!]
  traitBonuses_not_contains: [Int!]
  traitBonuses_not_contains_nocase: [Int!]
  wearableIds: [Int!]
  wearableIds_contains: [Int!]
  wearableIds_contains_nocase: [Int!]
  wearableIds_not: [Int!]
  wearableIds_not_contains: [Int!]
  wearableIds_not_contains_nocase: [Int!]
}

enum WearableSet_orderBy {
  allowedCollaterals
  id
  name
  traitBonuses
  wearableIds
}

type Whitelist {
  id: ID!

  """Access Right for max borrowed Gotchis, default 1"""
  maxBorrowLimit: Int
  members: [Bytes!]!
  name: String!
  owner: User!
  ownerAddress: Bytes!
}

input Whitelist_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Whitelist_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  maxBorrowLimit: Int
  maxBorrowLimit_gt: Int
  maxBorrowLimit_gte: Int
  maxBorrowLimit_in: [Int!]
  maxBorrowLimit_lt: Int
  maxBorrowLimit_lte: Int
  maxBorrowLimit_not: Int
  maxBorrowLimit_not_in: [Int!]
  members: [Bytes!]
  members_contains: [Bytes!]
  members_contains_nocase: [Bytes!]
  members_not: [Bytes!]
  members_not_contains: [Bytes!]
  members_not_contains_nocase: [Bytes!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [Whitelist_filter]
  owner: String
  ownerAddress: Bytes
  ownerAddress_contains: Bytes
  ownerAddress_gt: Bytes
  ownerAddress_gte: Bytes
  ownerAddress_in: [Bytes!]
  ownerAddress_lt: Bytes
  ownerAddress_lte: Bytes
  ownerAddress_not: Bytes
  ownerAddress_not_contains: Bytes
  ownerAddress_not_in: [Bytes!]
  owner_: User_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
}

enum Whitelist_orderBy {
  id
  maxBorrowLimit
  members
  name
  owner
  ownerAddress
  owner__amountFakeGotchis
  owner__currentUniqueFakeGotchisOwned
  owner__currentUniqueFakeGotchisOwnedArray
  owner__fakeGotchis
  owner__id
  owner__totalFakeGotchisOwnedArray
  owner__totalUniqueFakeGotchisOwned
  owner__totalUniqueFakeGotchisOwnedArray
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """The hash of the parent block"""
  parentHash: Bytes

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}